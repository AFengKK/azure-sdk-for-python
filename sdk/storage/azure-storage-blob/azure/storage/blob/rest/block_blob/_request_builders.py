# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING

from azure.storage.blob.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Dict, IO, List, Optional, Union

_SERIALIZER = Serializer()


def build_upload_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Upload Block Blob operation updates the content of an existing block blob. Updating an
    existing block blob overwrites any existing metadata on the blob. Partial updates are not
    supported with Put Blob; the content of the existing blob is overwritten with the content of
    the new blob. To perform a partial update of the content of a block blob, use the Put Block
    List operation.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: Initial data.
    :paramtype content: IO
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword blob_content_type: Optional. Sets the blob's content type. If specified, this property
     is stored with the blob and returned with a read request.
    :paramtype blob_content_type: str
    :keyword blob_content_encoding: Optional. Sets the blob's content encoding. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_encoding: str
    :keyword blob_content_language: Optional. Set the blob's content language. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_language: str
    :keyword blob_content_md5: Optional. An MD5 hash of the blob content. Note that this hash is
     not validated, as the hashes for the individual blocks were validated when each was uploaded.
    :paramtype blob_content_md5: bytearray
    :keyword blob_cache_control: Optional. Sets the blob's cache control. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_cache_control: str
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword blob_content_disposition: Optional. Sets the blob's Content-Disposition header.
    :paramtype blob_content_disposition: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword tier: Optional. Indicates the tier to be set on the blob.
    :paramtype tier: str or ~azure.storage.blob.models.AccessTier
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_length = kwargs.pop('content_length')  # type: int
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    transactional_content_md5 = kwargs.pop('transactional_content_md5', None)  # type: Optional[bytearray]
    blob_content_type = kwargs.pop('blob_content_type', None)  # type: Optional[str]
    blob_content_encoding = kwargs.pop('blob_content_encoding', None)  # type: Optional[str]
    blob_content_language = kwargs.pop('blob_content_language', None)  # type: Optional[str]
    blob_content_md5 = kwargs.pop('blob_content_md5', None)  # type: Optional[bytearray]
    blob_cache_control = kwargs.pop('blob_cache_control', None)  # type: Optional[str]
    metadata = kwargs.pop('metadata', None)  # type: Optional[Dict[str, str]]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    blob_content_disposition = kwargs.pop('blob_content_disposition', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    tier = kwargs.pop('tier', None)  # type: Optional[Union[str, "_models.AccessTier"]]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    blob_tags_string = kwargs.pop('blob_tags_string', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    blob_type = "BlockBlob"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_content_md5 is not None:
        header_parameters['x-ms-blob-content-md5'] = _SERIALIZER.header("blob_content_md5", blob_content_md5, 'bytearray')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if blob_content_type is not None:
        header_parameters['x-ms-blob-content-type'] = _SERIALIZER.header("blob_content_type", blob_content_type, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['x-ms-blob-type'] = _SERIALIZER.header("blob_type", blob_type, 'str')
    if blob_content_disposition is not None:
        header_parameters['x-ms-blob-content-disposition'] = _SERIALIZER.header("blob_content_disposition", blob_content_disposition, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if tier is not None:
        header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if blob_content_encoding is not None:
        header_parameters['x-ms-blob-content-encoding'] = _SERIALIZER.header("blob_content_encoding", blob_content_encoding, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if blob_content_language is not None:
        header_parameters['x-ms-blob-content-language'] = _SERIALIZER.header("blob_content_language", blob_content_language, 'str')
    if blob_cache_control is not None:
        header_parameters['x-ms-blob-cache-control'] = _SERIALIZER.header("blob_cache_control", blob_cache_control, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_put_blob_from_url_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Put Blob from URL operation creates a new Block Blob where the contents of the blob are
    read from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial
    updates are not supported with Put Blob from URL; the content of an existing blob is
    overwritten with the content of the new blob.  To perform partial updates to a block blob’s
    contents using a source URL, use the Put Block from URL API in conjunction with Put Block List.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword copy_source: Specifies the name of the source page blob snapshot. This value is a URL
     of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as
     it would appear in a request URI. The source blob must either be public or must be
     authenticated via a shared access signature.
    :paramtype copy_source: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword blob_content_type: Optional. Sets the blob's content type. If specified, this property
     is stored with the blob and returned with a read request.
    :paramtype blob_content_type: str
    :keyword blob_content_encoding: Optional. Sets the blob's content encoding. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_encoding: str
    :keyword blob_content_language: Optional. Set the blob's content language. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_language: str
    :keyword blob_content_md5: Optional. An MD5 hash of the blob content. Note that this hash is
     not validated, as the hashes for the individual blocks were validated when each was uploaded.
    :paramtype blob_content_md5: bytearray
    :keyword blob_cache_control: Optional. Sets the blob's cache control. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_cache_control: str
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword blob_content_disposition: Optional. Sets the blob's Content-Disposition header.
    :paramtype blob_content_disposition: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword tier: Optional. Indicates the tier to be set on the blob.
    :paramtype tier: str or ~azure.storage.blob.models.AccessTier
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword source_if_tags: Specify a SQL where clause on blob tags to operate only on blobs with
     a matching value.
    :paramtype source_if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword source_content_md5: Specify the md5 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_content_md5: bytearray
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :keyword copy_source_blob_properties: Optional, default is true.  Indicates if properties from
     the source blob should be copied.
    :paramtype copy_source_blob_properties: bool
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_length = kwargs.pop('content_length')  # type: int
    copy_source = kwargs.pop('copy_source')  # type: str
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    transactional_content_md5 = kwargs.pop('transactional_content_md5', None)  # type: Optional[bytearray]
    blob_content_type = kwargs.pop('blob_content_type', None)  # type: Optional[str]
    blob_content_encoding = kwargs.pop('blob_content_encoding', None)  # type: Optional[str]
    blob_content_language = kwargs.pop('blob_content_language', None)  # type: Optional[str]
    blob_content_md5 = kwargs.pop('blob_content_md5', None)  # type: Optional[bytearray]
    blob_cache_control = kwargs.pop('blob_cache_control', None)  # type: Optional[str]
    metadata = kwargs.pop('metadata', None)  # type: Optional[Dict[str, str]]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    blob_content_disposition = kwargs.pop('blob_content_disposition', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    tier = kwargs.pop('tier', None)  # type: Optional[Union[str, "_models.AccessTier"]]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    source_if_modified_since = kwargs.pop('source_if_modified_since', None)  # type: Optional[datetime.datetime]
    source_if_unmodified_since = kwargs.pop('source_if_unmodified_since', None)  # type: Optional[datetime.datetime]
    source_if_match = kwargs.pop('source_if_match', None)  # type: Optional[str]
    source_if_none_match = kwargs.pop('source_if_none_match', None)  # type: Optional[str]
    source_if_tags = kwargs.pop('source_if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    source_content_md5 = kwargs.pop('source_content_md5', None)  # type: Optional[bytearray]
    blob_tags_string = kwargs.pop('blob_tags_string', None)  # type: Optional[str]
    copy_source_blob_properties = kwargs.pop('copy_source_blob_properties', None)  # type: Optional[bool]
    blob_type = "BlockBlob"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if source_content_md5 is not None:
        header_parameters['x-ms-source-content-md5'] = _SERIALIZER.header("source_content_md5", source_content_md5, 'bytearray')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_content_md5 is not None:
        header_parameters['x-ms-blob-content-md5'] = _SERIALIZER.header("blob_content_md5", blob_content_md5, 'bytearray')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if blob_content_type is not None:
        header_parameters['x-ms-blob-content-type'] = _SERIALIZER.header("blob_content_type", blob_content_type, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['x-ms-blob-type'] = _SERIALIZER.header("blob_type", blob_type, 'str')
    if blob_content_disposition is not None:
        header_parameters['x-ms-blob-content-disposition'] = _SERIALIZER.header("blob_content_disposition", blob_content_disposition, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if tier is not None:
        header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if copy_source_blob_properties is not None:
        header_parameters['x-ms-copy-source-blob-properties'] = _SERIALIZER.header("copy_source_blob_properties", copy_source_blob_properties, 'bool')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("copy_source", copy_source, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if blob_content_encoding is not None:
        header_parameters['x-ms-blob-content-encoding'] = _SERIALIZER.header("blob_content_encoding", blob_content_encoding, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if source_if_tags is not None:
        header_parameters['x-ms-source-if-tags'] = _SERIALIZER.header("source_if_tags", source_if_tags, 'str')
    if blob_content_language is not None:
        header_parameters['x-ms-blob-content-language'] = _SERIALIZER.header("blob_content_language", blob_content_language, 'str')
    if blob_cache_control is not None:
        header_parameters['x-ms-blob-cache-control'] = _SERIALIZER.header("blob_cache_control", blob_cache_control, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stage_block_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Stage Block operation creates a new block to be committed as part of a blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: Initial data.
    :paramtype content: IO
    :keyword block_id: A valid Base64 string value that identifies the block. Prior to encoding,
     the string must be less than or equal to 64 bytes in size. For a given blob, the length of the
     value specified for the blockid parameter must be the same size for each block.
    :paramtype block_id: str
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword transactional_content_crc64: Specify the transactional crc64 for the body, to be
     validated by the service.
    :paramtype transactional_content_crc64: bytearray
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    block_id = kwargs.pop('block_id')  # type: str
    content_length = kwargs.pop('content_length')  # type: int
    transactional_content_md5 = kwargs.pop('transactional_content_md5', None)  # type: Optional[bytearray]
    transactional_content_crc64 = kwargs.pop('transactional_content_crc64', None)  # type: Optional[bytearray]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    comp = "block"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['blockid'] = _SERIALIZER.query("block_id", block_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if transactional_content_crc64 is not None:
        header_parameters['x-ms-content-crc64'] = _SERIALIZER.header("transactional_content_crc64", transactional_content_crc64, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stage_block_from_url_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Stage Block operation creates a new block to be committed as part of a blob where the
    contents are read from a URL.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword block_id: A valid Base64 string value that identifies the block. Prior to encoding,
     the string must be less than or equal to 64 bytes in size. For a given blob, the length of the
     value specified for the blockid parameter must be the same size for each block.
    :paramtype block_id: str
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword source_url: Specify a URL to the copy source.
    :paramtype source_url: str
    :keyword source_range: Bytes of source data in the specified range.
    :paramtype source_range: str
    :keyword source_content_md5: Specify the md5 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_content_md5: bytearray
    :keyword source_contentcrc64: Specify the crc64 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_contentcrc64: bytearray
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    block_id = kwargs.pop('block_id')  # type: str
    content_length = kwargs.pop('content_length')  # type: int
    source_url = kwargs.pop('source_url')  # type: str
    source_range = kwargs.pop('source_range', None)  # type: Optional[str]
    source_content_md5 = kwargs.pop('source_content_md5', None)  # type: Optional[bytearray]
    source_contentcrc64 = kwargs.pop('source_contentcrc64', None)  # type: Optional[bytearray]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    source_if_modified_since = kwargs.pop('source_if_modified_since', None)  # type: Optional[datetime.datetime]
    source_if_unmodified_since = kwargs.pop('source_if_unmodified_since', None)  # type: Optional[datetime.datetime]
    source_if_match = kwargs.pop('source_if_match', None)  # type: Optional[str]
    source_if_none_match = kwargs.pop('source_if_none_match', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "block"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['blockid'] = _SERIALIZER.query("block_id", block_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if source_contentcrc64 is not None:
        header_parameters['x-ms-source-content-crc64'] = _SERIALIZER.header("source_contentcrc64", source_contentcrc64, 'bytearray')
    if source_content_md5 is not None:
        header_parameters['x-ms-source-content-md5'] = _SERIALIZER.header("source_content_md5", source_content_md5, 'bytearray')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("source_url", source_url, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if source_range is not None:
        header_parameters['x-ms-source-range'] = _SERIALIZER.header("source_range", source_range, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_commit_block_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Commit Block List operation writes a blob by specifying the list of block IDs that make up
    the blob. In order to be written as part of a blob, a block must have been successfully written
    to the server in a prior Put Block operation. You can call Put Block List to update a blob by
    uploading only those blocks that have changed, then committing the new and existing blocks
    together. You can do this by specifying whether to commit a block from the committed block list
    or from the uncommitted block list, or to commit the most recently uploaded version of the
    block, whichever list it may belong to.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content:
    :paramtype content: Any
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword blob_cache_control: Optional. Sets the blob's cache control. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_cache_control: str
    :keyword blob_content_type: Optional. Sets the blob's content type. If specified, this property
     is stored with the blob and returned with a read request.
    :paramtype blob_content_type: str
    :keyword blob_content_encoding: Optional. Sets the blob's content encoding. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_encoding: str
    :keyword blob_content_language: Optional. Set the blob's content language. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_language: str
    :keyword blob_content_md5: Optional. An MD5 hash of the blob content. Note that this hash is
     not validated, as the hashes for the individual blocks were validated when each was uploaded.
    :paramtype blob_content_md5: bytearray
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword transactional_content_crc64: Specify the transactional crc64 for the body, to be
     validated by the service.
    :paramtype transactional_content_crc64: bytearray
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword blob_content_disposition: Optional. Sets the blob's Content-Disposition header.
    :paramtype blob_content_disposition: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword tier: Optional. Indicates the tier to be set on the blob.
    :paramtype tier: str or ~azure.storage.blob.models.AccessTier
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    blob_cache_control = kwargs.pop('blob_cache_control', None)  # type: Optional[str]
    blob_content_type = kwargs.pop('blob_content_type', None)  # type: Optional[str]
    blob_content_encoding = kwargs.pop('blob_content_encoding', None)  # type: Optional[str]
    blob_content_language = kwargs.pop('blob_content_language', None)  # type: Optional[str]
    blob_content_md5 = kwargs.pop('blob_content_md5', None)  # type: Optional[bytearray]
    transactional_content_md5 = kwargs.pop('transactional_content_md5', None)  # type: Optional[bytearray]
    transactional_content_crc64 = kwargs.pop('transactional_content_crc64', None)  # type: Optional[bytearray]
    metadata = kwargs.pop('metadata', None)  # type: Optional[Dict[str, str]]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    blob_content_disposition = kwargs.pop('blob_content_disposition', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    tier = kwargs.pop('tier', None)  # type: Optional[Union[str, "_models.AccessTier"]]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    blob_tags_string = kwargs.pop('blob_tags_string', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    comp = "blocklist"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_content_md5 is not None:
        header_parameters['x-ms-blob-content-md5'] = _SERIALIZER.header("blob_content_md5", blob_content_md5, 'bytearray')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if blob_content_type is not None:
        header_parameters['x-ms-blob-content-type'] = _SERIALIZER.header("blob_content_type", blob_content_type, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if blob_content_disposition is not None:
        header_parameters['x-ms-blob-content-disposition'] = _SERIALIZER.header("blob_content_disposition", blob_content_disposition, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if tier is not None:
        header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if blob_content_encoding is not None:
        header_parameters['x-ms-blob-content-encoding'] = _SERIALIZER.header("blob_content_encoding", blob_content_encoding, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if transactional_content_crc64 is not None:
        header_parameters['x-ms-content-crc64'] = _SERIALIZER.header("transactional_content_crc64", transactional_content_crc64, 'bytearray')
    if blob_content_language is not None:
        header_parameters['x-ms-blob-content-language'] = _SERIALIZER.header("blob_content_language", blob_content_language, 'str')
    if blob_cache_control is not None:
        header_parameters['x-ms-blob-cache-control'] = _SERIALIZER.header("blob_cache_control", blob_cache_control, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_block_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Get Block List operation retrieves the list of blocks that have been uploaded as part of a
    block blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword list_type: Specifies whether to return the list of committed blocks, the list of
     uncommitted blocks, or both lists together.
    :paramtype list_type: str or ~azure.storage.blob.models.BlockListType
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    snapshot = kwargs.pop('snapshot', None)  # type: Optional[str]
    list_type = kwargs.pop('list_type', "committed")  # type: Union[str, "_models.BlockListType"]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "blocklist"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    query_parameters['blocklisttype'] = _SERIALIZER.query("list_type", list_type, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

