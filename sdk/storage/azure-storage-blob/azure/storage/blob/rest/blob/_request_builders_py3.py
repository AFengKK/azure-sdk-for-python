# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Dict, IO, List, Optional, Union

from azure.storage.blob.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_download_request(
    *,
    snapshot: Optional[str] = None,
    version_id: Optional[str] = None,
    timeout: Optional[int] = None,
    range: Optional[str] = None,
    lease_id: Optional[str] = None,
    range_get_content_md5: Optional[bool] = None,
    range_get_content_crc64: Optional[bool] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Download operation reads or downloads a blob from the system, including its metadata and
    properties. You can also call Download to read a snapshot.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword version_id: The version id parameter is an opaque DateTime value that, when present,
     specifies the version of the blob to operate on. It's for service version 2019-10-10 and newer.
    :paramtype version_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword range: Return only the bytes of the blob in the specified range.
    :paramtype range: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword range_get_content_md5: When set to true and specified together with the Range, the
     service returns the MD5 hash for the range, as long as the range is less than or equal to 4 MB
     in size.
    :paramtype range_get_content_md5: bool
    :keyword range_get_content_crc64: When set to true and specified together with the Range, the
     service returns the CRC64 hash for the range, as long as the range is less than or equal to 4
     MB in size.
    :paramtype range_get_content_crc64: bool
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if version_id is not None:
        query_parameters['versionid'] = _SERIALIZER.query("version_id", version_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if range_get_content_crc64 is not None:
        header_parameters['x-ms-range-get-content-crc64'] = _SERIALIZER.header("range_get_content_crc64", range_get_content_crc64, 'bool')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if range is not None:
        header_parameters['x-ms-range'] = _SERIALIZER.header("range", range, 'str')
    if range_get_content_md5 is not None:
        header_parameters['x-ms-range-get-content-md5'] = _SERIALIZER.header("range_get_content_md5", range_get_content_md5, 'bool')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_properties_request(
    *,
    snapshot: Optional[str] = None,
    version_id: Optional[str] = None,
    timeout: Optional[int] = None,
    lease_id: Optional[str] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Get Properties operation returns all user-defined metadata, standard HTTP properties, and
    system properties for the blob. It does not return the content of the blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword version_id: The version id parameter is an opaque DateTime value that, when present,
     specifies the version of the blob to operate on. It's for service version 2019-10-10 and newer.
    :paramtype version_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if version_id is not None:
        query_parameters['versionid'] = _SERIALIZER.query("version_id", version_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="HEAD",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_request(
    *,
    snapshot: Optional[str] = None,
    version_id: Optional[str] = None,
    timeout: Optional[int] = None,
    lease_id: Optional[str] = None,
    delete_snapshots: Optional[Union[str, "_models.DeleteSnapshotsOptionType"]] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    blob_delete_type: Optional[str] = "Permanent",
    **kwargs: Any
) -> HttpRequest:
    """If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
    permanently removed from the storage account. If the storage account's soft delete feature is
    enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
    immediately. However, the blob service retains the blob or snapshot for the number of days
    specified by the DeleteRetentionPolicy section of [Storage service properties] (Set-Blob-
    Service-Properties.md). After the specified number of days has passed, the blob's data is
    permanently removed from the storage account. Note that you continue to be charged for the
    soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify
    the "include=deleted" query parameter to discover which blobs and snapshots have been soft
    deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other
    operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code
    of 404 (ResourceNotFound).

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword version_id: The version id parameter is an opaque DateTime value that, when present,
     specifies the version of the blob to operate on. It's for service version 2019-10-10 and newer.
    :paramtype version_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword delete_snapshots: Required if the blob has associated snapshots. Specify one of the
     following two options: include: Delete the base blob and all of its snapshots. only: Delete
     only the blob's snapshots and not the blob itself.
    :paramtype delete_snapshots: str or ~azure.storage.blob.models.DeleteSnapshotsOptionType
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword blob_delete_type: Optional.  Only possible value is 'permanent', which specifies to
     permanently delete a blob if blob soft delete is enabled.
    :paramtype blob_delete_type: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if version_id is not None:
        query_parameters['versionid'] = _SERIALIZER.query("version_id", version_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if blob_delete_type is not None:
        query_parameters['deletetype'] = _SERIALIZER.query("blob_delete_type", blob_delete_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if delete_snapshots is not None:
        header_parameters['x-ms-delete-snapshots'] = _SERIALIZER.header("delete_snapshots", delete_snapshots, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_access_control_request(
    *,
    timeout: Optional[int] = None,
    lease_id: Optional[str] = None,
    owner: Optional[str] = None,
    group: Optional[str] = None,
    posix_permissions: Optional[str] = None,
    posix_acl: Optional[str] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Set the owner, group, permissions, or access control list for a blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword owner: Optional. The owner of the blob or directory.
    :paramtype owner: str
    :keyword group: Optional. The owning group of the blob or directory.
    :paramtype group: str
    :keyword posix_permissions: Optional and only valid if Hierarchical Namespace is enabled for
     the account. Sets POSIX access permissions for the file owner, the file owning group, and
     others. Each class may be granted read, write, or execute permission.  The sticky bit is also
     supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
    :paramtype posix_permissions: str
    :keyword posix_acl: Sets POSIX access control rights on files and directories. The value is a
     comma-separated list of access control entries. Each access control entry (ACE) consists of a
     scope, a type, a user or group identifier, and permissions in the format
     "[scope:][type]:[id]:[permissions]".
    :paramtype posix_acl: str
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    action = "setAccessControl"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if group is not None:
        header_parameters['x-ms-group'] = _SERIALIZER.header("group", group, 'str')
    if posix_acl is not None:
        header_parameters['x-ms-acl'] = _SERIALIZER.header("posix_acl", posix_acl, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if owner is not None:
        header_parameters['x-ms-owner'] = _SERIALIZER.header("owner", owner, 'str')
    if posix_permissions is not None:
        header_parameters['x-ms-permissions'] = _SERIALIZER.header("posix_permissions", posix_permissions, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_access_control_request(
    *,
    timeout: Optional[int] = None,
    upn: Optional[bool] = None,
    lease_id: Optional[str] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Get the owner, group, permissions, or access control list for a blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword upn: Optional. Valid only when Hierarchical Namespace is enabled for the account. If
     "true", the identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
     headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If
     "false", the values will be returned as Azure Active Directory Object IDs. The default value is
     false.
    :paramtype upn: bool
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    action = "getAccessControl"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if upn is not None:
        query_parameters['upn'] = _SERIALIZER.query("upn", upn, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="HEAD",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_rename_request(
    *,
    rename_source: str,
    timeout: Optional[int] = None,
    path_rename_mode: Optional[Union[str, "_models.PathRenameMode"]] = None,
    directory_properties: Optional[str] = None,
    posix_permissions: Optional[str] = None,
    posix_umask: Optional[str] = None,
    cache_control: Optional[str] = None,
    content_type: Optional[str] = None,
    content_encoding: Optional[str] = None,
    content_language: Optional[str] = None,
    content_disposition: Optional[str] = None,
    lease_id: Optional[str] = None,
    source_lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    source_if_modified_since: Optional[datetime.datetime] = None,
    source_if_unmodified_since: Optional[datetime.datetime] = None,
    source_if_match: Optional[str] = None,
    source_if_none_match: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Rename a blob/file.  By default, the destination is overwritten and if the destination already
    exists and has a lease the lease is broken.  This operation supports conditional HTTP requests.
    For more information, see `Specifying Conditional Headers for Blob Service Operations
    <https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-
    blob-service-operations>`_.  To fail if the destination already exists, use a conditional
    request with If-None-Match: "*".

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword rename_source: The file or directory to be renamed. The value must have the following
     format: "/{filesysystem}/{path}".  If "x-ms-properties" is specified, the properties will
     overwrite the existing properties; otherwise, the existing properties will be preserved.
    :paramtype rename_source: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword path_rename_mode: Determines the behavior of the rename operation.
    :paramtype path_rename_mode: str or ~azure.storage.blob.models.PathRenameMode
    :keyword directory_properties: Optional.  User-defined properties to be stored with the file or
     directory, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...",
     where each value is base64 encoded.
    :paramtype directory_properties: str
    :keyword posix_permissions: Optional and only valid if Hierarchical Namespace is enabled for
     the account. Sets POSIX access permissions for the file owner, the file owning group, and
     others. Each class may be granted read, write, or execute permission.  The sticky bit is also
     supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
    :paramtype posix_permissions: str
    :keyword posix_umask: Only valid if Hierarchical Namespace is enabled for the account. This
     umask restricts permission settings for file and directory, and will only be applied when
     default Acl does not exist in parent directory. If the umask bit has set, it means that the
     corresponding permission will be disabled. Otherwise the corresponding permission will be
     determined by the permission. A 4-digit octal notation (e.g. 0022) is supported here. If no
     umask was specified, a default umask - 0027 will be used.
    :paramtype posix_umask: str
    :keyword cache_control: Cache control for given resource.
    :paramtype cache_control: str
    :keyword content_type: Content type for given resource.
    :paramtype content_type: str
    :keyword content_encoding: Content encoding for given resource.
    :paramtype content_encoding: str
    :keyword content_language: Content language for given resource.
    :paramtype content_language: str
    :keyword content_disposition: Content disposition for given resource.
    :paramtype content_disposition: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword source_lease_id: A lease ID for the source path. If specified, the source path must
     have an active lease and the lease ID must match.
    :paramtype source_lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if path_rename_mode is not None:
        query_parameters['mode'] = _SERIALIZER.query("path_rename_mode", path_rename_mode, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if content_disposition is not None:
        header_parameters['x-ms-content-disposition'] = _SERIALIZER.header("content_disposition", content_disposition, 'str')
    if cache_control is not None:
        header_parameters['x-ms-cache-control'] = _SERIALIZER.header("cache_control", cache_control, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if posix_permissions is not None:
        header_parameters['x-ms-permissions'] = _SERIALIZER.header("posix_permissions", posix_permissions, 'str')
    if content_type is not None:
        header_parameters['x-ms-content-type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if content_language is not None:
        header_parameters['x-ms-content-language'] = _SERIALIZER.header("content_language", content_language, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if source_lease_id is not None:
        header_parameters['x-ms-source-lease-id'] = _SERIALIZER.header("source_lease_id", source_lease_id, 'str')
    if content_encoding is not None:
        header_parameters['x-ms-content-encoding'] = _SERIALIZER.header("content_encoding", content_encoding, 'str')
    if posix_umask is not None:
        header_parameters['x-ms-umask'] = _SERIALIZER.header("posix_umask", posix_umask, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-rename-source'] = _SERIALIZER.header("rename_source", rename_source, 'str')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if directory_properties is not None:
        header_parameters['x-ms-properties'] = _SERIALIZER.header("directory_properties", directory_properties, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_undelete_request(
    *,
    timeout: Optional[int] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Undelete a blob that was previously soft deleted.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "undelete"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_expiry_request(
    *,
    expiry_options: Union[str, "_models.BlobExpiryOptions"],
    timeout: Optional[int] = None,
    request_id_parameter: Optional[str] = None,
    expires_on: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Sets the time a blob will expire and be deleted.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword expiry_options: Required. Indicates mode of the expiry time.
    :paramtype expiry_options: str or ~azure.storage.blob.models.BlobExpiryOptions
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword expires_on: The time to set the blob to expiry.
    :paramtype expires_on: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "expiry"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if expires_on is not None:
        header_parameters['x-ms-expiry-time'] = _SERIALIZER.header("expires_on", expires_on, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['x-ms-expiry-option'] = _SERIALIZER.header("expiry_options", expiry_options, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_http_headers_request(
    *,
    timeout: Optional[int] = None,
    blob_cache_control: Optional[str] = None,
    blob_content_type: Optional[str] = None,
    blob_content_md5: Optional[bytearray] = None,
    blob_content_encoding: Optional[str] = None,
    blob_content_language: Optional[str] = None,
    lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    blob_content_disposition: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Set HTTP Headers operation sets system properties on the blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword blob_cache_control: Optional. Sets the blob's cache control. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_cache_control: str
    :keyword blob_content_type: Optional. Sets the blob's content type. If specified, this property
     is stored with the blob and returned with a read request.
    :paramtype blob_content_type: str
    :keyword blob_content_md5: Optional. An MD5 hash of the blob content. Note that this hash is
     not validated, as the hashes for the individual blocks were validated when each was uploaded.
    :paramtype blob_content_md5: bytearray
    :keyword blob_content_encoding: Optional. Sets the blob's content encoding. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_encoding: str
    :keyword blob_content_language: Optional. Set the blob's content language. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_language: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword blob_content_disposition: Optional. Sets the blob's Content-Disposition header.
    :paramtype blob_content_disposition: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if blob_content_language is not None:
        header_parameters['x-ms-blob-content-language'] = _SERIALIZER.header("blob_content_language", blob_content_language, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_content_disposition is not None:
        header_parameters['x-ms-blob-content-disposition'] = _SERIALIZER.header("blob_content_disposition", blob_content_disposition, 'str')
    if blob_content_md5 is not None:
        header_parameters['x-ms-blob-content-md5'] = _SERIALIZER.header("blob_content_md5", blob_content_md5, 'bytearray')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if blob_content_encoding is not None:
        header_parameters['x-ms-blob-content-encoding'] = _SERIALIZER.header("blob_content_encoding", blob_content_encoding, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if blob_content_type is not None:
        header_parameters['x-ms-blob-content-type'] = _SERIALIZER.header("blob_content_type", blob_content_type, 'str')
    if blob_cache_control is not None:
        header_parameters['x-ms-blob-cache-control'] = _SERIALIZER.header("blob_cache_control", blob_cache_control, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_metadata_request(
    *,
    timeout: Optional[int] = None,
    metadata: Optional[Dict[str, str]] = None,
    lease_id: Optional[str] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    encryption_scope: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or
    more name-value pairs.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "metadata"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_acquire_lease_request(
    *,
    timeout: Optional[int] = None,
    duration: Optional[int] = None,
    proposed_lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """[Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
    operations.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword duration: Specifies the duration of the lease, in seconds, or negative one (-1) for a
     lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease
     duration cannot be changed using renew or change.
    :paramtype duration: int
    :keyword proposed_lease_id: Proposed lease ID, in a GUID string format. The Blob service
     returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid
     Constructor (String) for a list of valid GUID string formats.
    :paramtype proposed_lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "lease"
    action = "acquire"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if proposed_lease_id is not None:
        header_parameters['x-ms-proposed-lease-id'] = _SERIALIZER.header("proposed_lease_id", proposed_lease_id, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-lease-action'] = _SERIALIZER.header("action", action, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if duration is not None:
        header_parameters['x-ms-lease-duration'] = _SERIALIZER.header("duration", duration, 'int')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_release_lease_request(
    *,
    lease_id: str,
    timeout: Optional[int] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """[Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
    operations.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword lease_id: Specifies the current lease ID on the resource.
    :paramtype lease_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "lease"
    action = "release"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['x-ms-lease-action'] = _SERIALIZER.header("action", action, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_renew_lease_request(
    *,
    lease_id: str,
    timeout: Optional[int] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """[Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
    operations.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword lease_id: Specifies the current lease ID on the resource.
    :paramtype lease_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "lease"
    action = "renew"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['x-ms-lease-action'] = _SERIALIZER.header("action", action, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_change_lease_request(
    *,
    lease_id: str,
    proposed_lease_id: str,
    timeout: Optional[int] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """[Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
    operations.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword lease_id: Specifies the current lease ID on the resource.
    :paramtype lease_id: str
    :keyword proposed_lease_id: Proposed lease ID, in a GUID string format. The Blob service
     returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid
     Constructor (String) for a list of valid GUID string formats.
    :paramtype proposed_lease_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "lease"
    action = "change"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    header_parameters['x-ms-proposed-lease-id'] = _SERIALIZER.header("proposed_lease_id", proposed_lease_id, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['x-ms-lease-action'] = _SERIALIZER.header("action", action, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_break_lease_request(
    *,
    timeout: Optional[int] = None,
    break_period: Optional[int] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """[Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
    operations.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword break_period: For a break operation, proposed duration the lease should continue
     before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     shorter than the time remaining on the lease. If longer, the time remaining on the lease is
     used. A new lease will not be available before the break period has expired, but the lease may
     be held for longer than the break period. If this header does not appear with a break
     operation, a fixed-duration lease breaks after the remaining lease period elapses, and an
     infinite lease breaks immediately.
    :paramtype break_period: int
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "lease"
    action = "break"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if break_period is not None:
        header_parameters['x-ms-lease-break-period'] = _SERIALIZER.header("break_period", break_period, 'int')
    header_parameters['x-ms-lease-action'] = _SERIALIZER.header("action", action, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_snapshot_request(
    *,
    timeout: Optional[int] = None,
    metadata: Optional[Dict[str, str]] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    encryption_scope: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    lease_id: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Create Snapshot operation creates a read-only snapshot of a blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "snapshot"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_start_copy_from_url_request(
    *,
    copy_source: str,
    timeout: Optional[int] = None,
    metadata: Optional[Dict[str, str]] = None,
    tier: Optional[Union[str, "_models.AccessTier"]] = None,
    rehydrate_priority: Optional[Union[str, "_models.RehydratePriority"]] = None,
    source_if_modified_since: Optional[datetime.datetime] = None,
    source_if_unmodified_since: Optional[datetime.datetime] = None,
    source_if_match: Optional[str] = None,
    source_if_none_match: Optional[str] = None,
    source_if_tags: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    lease_id: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    blob_tags_string: Optional[str] = None,
    seal_blob: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Start Copy From URL operation copies a blob or an internet resource to a new blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword copy_source: Specifies the name of the source page blob snapshot. This value is a URL
     of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as
     it would appear in a request URI. The source blob must either be public or must be
     authenticated via a shared access signature.
    :paramtype copy_source: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword tier: Optional. Indicates the tier to be set on the blob.
    :paramtype tier: str or ~azure.storage.blob.models.AccessTier
    :keyword rehydrate_priority: Optional: Indicates the priority with which to rehydrate an
     archived blob.
    :paramtype rehydrate_priority: str or ~azure.storage.blob.models.RehydratePriority
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword source_if_tags: Specify a SQL where clause on blob tags to operate only on blobs with
     a matching value.
    :paramtype source_if_tags: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :keyword seal_blob: Overrides the sealed state of the destination blob.  Service version
     2019-12-12 and newer.
    :paramtype seal_blob: bool
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if rehydrate_priority is not None:
        header_parameters['x-ms-rehydrate-priority'] = _SERIALIZER.header("rehydrate_priority", rehydrate_priority, 'str')
    if seal_blob is not None:
        header_parameters['x-ms-seal-blob'] = _SERIALIZER.header("seal_blob", seal_blob, 'bool')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if tier is not None:
        header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("copy_source", copy_source, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if source_if_tags is not None:
        header_parameters['x-ms-source-if-tags'] = _SERIALIZER.header("source_if_tags", source_if_tags, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_copy_from_url_request(
    *,
    copy_source: str,
    timeout: Optional[int] = None,
    metadata: Optional[Dict[str, str]] = None,
    tier: Optional[Union[str, "_models.AccessTier"]] = None,
    source_if_modified_since: Optional[datetime.datetime] = None,
    source_if_unmodified_since: Optional[datetime.datetime] = None,
    source_if_match: Optional[str] = None,
    source_if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    lease_id: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    source_content_md5: Optional[bytearray] = None,
    blob_tags_string: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Copy From URL operation copies a blob or an internet resource to a new blob. It will not
    return a response until the copy is complete.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword copy_source: Specifies the name of the source page blob snapshot. This value is a URL
     of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as
     it would appear in a request URI. The source blob must either be public or must be
     authenticated via a shared access signature.
    :paramtype copy_source: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword tier: Optional. Indicates the tier to be set on the blob.
    :paramtype tier: str or ~azure.storage.blob.models.AccessTier
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword source_content_md5: Specify the md5 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_content_md5: bytearray
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    x_ms_requires_sync = "true"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if source_content_md5 is not None:
        header_parameters['x-ms-source-content-md5'] = _SERIALIZER.header("source_content_md5", source_content_md5, 'bytearray')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    header_parameters['x-ms-requires-sync'] = _SERIALIZER.header("x_ms_requires_sync", x_ms_requires_sync, 'str')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if tier is not None:
        header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("copy_source", copy_source, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_abort_copy_from_url_request(
    *,
    copy_id: str,
    timeout: Optional[int] = None,
    lease_id: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a
    destination blob with zero length and full metadata.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword copy_id: The copy identifier provided in the x-ms-copy-id header of the original Copy
     Blob operation.
    :paramtype copy_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "copy"
    copy_action_abort_constant = "abort"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['copyid'] = _SERIALIZER.query("copy_id", copy_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['x-ms-copy-action'] = _SERIALIZER.header("copy_action_abort_constant", copy_action_abort_constant, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_tier_request(
    *,
    tier: Union[str, "_models.AccessTier"],
    snapshot: Optional[str] = None,
    version_id: Optional[str] = None,
    timeout: Optional[int] = None,
    rehydrate_priority: Optional[Union[str, "_models.RehydratePriority"]] = None,
    request_id_parameter: Optional[str] = None,
    lease_id: Optional[str] = None,
    if_tags: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a
    premium storage account and on a block blob in a blob storage account (locally redundant
    storage only). A premium page blob's tier determines the allowed size, IOPS, and bandwidth of
    the blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
    update the blob's ETag.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword tier: Indicates the tier to be set on the blob.
    :paramtype tier: str or ~azure.storage.blob.models.AccessTier
    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword version_id: The version id parameter is an opaque DateTime value that, when present,
     specifies the version of the blob to operate on. It's for service version 2019-10-10 and newer.
    :paramtype version_id: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword rehydrate_priority: Optional: Indicates the priority with which to rehydrate an
     archived blob.
    :paramtype rehydrate_priority: str or ~azure.storage.blob.models.RehydratePriority
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "tier"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if version_id is not None:
        query_parameters['versionid'] = _SERIALIZER.query("version_id", version_id, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if rehydrate_priority is not None:
        header_parameters['x-ms-rehydrate-priority'] = _SERIALIZER.header("rehydrate_priority", rehydrate_priority, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_account_info_request(
    **kwargs: Any
) -> HttpRequest:
    """Returns the sku name and account kind.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    restype = "account"
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_query_request(
    *,
    content: Any = None,
    snapshot: Optional[str] = None,
    timeout: Optional[int] = None,
    lease_id: Optional[str] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Query operation enables users to select/project on blob data by providing simple query
    expressions.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: the query request.
    :paramtype content: Any
    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    comp = "query"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        content=content,
        **kwargs
    )


def build_get_tags_request(
    *,
    timeout: Optional[int] = None,
    request_id_parameter: Optional[str] = None,
    snapshot: Optional[str] = None,
    version_id: Optional[str] = None,
    if_tags: Optional[str] = None,
    lease_id: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Get Tags operation enables users to get the tags associated with a blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword version_id: The version id parameter is an opaque DateTime value that, when present,
     specifies the version of the blob to operate on. It's for service version 2019-10-10 and newer.
    :paramtype version_id: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "tags"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if version_id is not None:
        query_parameters['versionid'] = _SERIALIZER.query("version_id", version_id, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_tags_request(
    *,
    content: Any = None,
    timeout: Optional[int] = None,
    version_id: Optional[str] = None,
    transactional_content_md5: Optional[bytearray] = None,
    transactional_content_crc64: Optional[bytearray] = None,
    request_id_parameter: Optional[str] = None,
    if_tags: Optional[str] = None,
    lease_id: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Set Tags operation enables users to set tags on a blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: Blob tags.
    :paramtype content: Any
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword version_id: The version id parameter is an opaque DateTime value that, when present,
     specifies the version of the blob to operate on. It's for service version 2019-10-10 and newer.
    :paramtype version_id: str
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword transactional_content_crc64: Specify the transactional crc64 for the body, to be
     validated by the service.
    :paramtype transactional_content_crc64: bytearray
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    comp = "tags"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if version_id is not None:
        query_parameters['versionid'] = _SERIALIZER.query("version_id", version_id, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if transactional_content_crc64 is not None:
        header_parameters['x-ms-content-crc64'] = _SERIALIZER.header("transactional_content_crc64", transactional_content_crc64, 'bytearray')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        content=content,
        **kwargs
    )

