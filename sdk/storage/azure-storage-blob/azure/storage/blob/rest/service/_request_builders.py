# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING

from azure.storage.blob.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Dict, IO, List, Optional, Union

_SERIALIZER = Serializer()


def build_set_properties_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Sets properties for a storage account's Blob service endpoint, including properties for Storage
    Analytics and CORS (Cross-Origin Resource Sharing) rules.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: The StorageService properties.
    :paramtype content: Any
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    restype = "service"
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_properties_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """gets the properties of a storage account's Blob service, including properties for Storage
    Analytics and CORS (Cross-Origin Resource Sharing) rules.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    restype = "service"
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_statistics_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Retrieves statistics related to replication for the Blob service. It is only available on the
    secondary location endpoint when read-access geo-redundant replication is enabled for the
    storage account.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    restype = "service"
    comp = "stats"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_containers_segment_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The List Containers Segment operation returns a list of the containers under the specified
    account.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword prefix: Filters the results to return only containers whose name begins with the
     specified prefix.
    :paramtype prefix: str
    :keyword marker: A string value that identifies the portion of the list of containers to be
     returned with the next listing operation. The operation returns the NextMarker value within the
     response body if the listing operation did not return all containers remaining to be listed
     with the current page. The NextMarker value can be used as the value for the marker parameter
     in a subsequent call to request the next page of list items. The marker value is opaque to the
     client.
    :paramtype marker: str
    :keyword maxresults: Specifies the maximum number of containers to return. If the request does
     not specify maxresults, or specifies a value greater than 5000, the server will return up to
     5000 items. Note that if the listing operation crosses a partition boundary, then the service
     will return a continuation token for retrieving the remainder of the results. For this reason,
     it is possible that the service will return fewer results than specified by maxresults, or than
     the default of 5000.
    :paramtype maxresults: int
    :keyword include: Include this parameter to specify that the container's metadata be returned
     as part of the response body.
    :paramtype include: list[str or ~azure.storage.blob.models.ListContainersIncludeType]
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    prefix = kwargs.pop('prefix', None)  # type: Optional[str]
    marker = kwargs.pop('marker', None)  # type: Optional[str]
    maxresults = kwargs.pop('maxresults', None)  # type: Optional[int]
    include = kwargs.pop('include', None)  # type: Optional[List[Union[str, "_models.ListContainersIncludeType"]]]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "list"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if prefix is not None:
        query_parameters['prefix'] = _SERIALIZER.query("prefix", prefix, 'str')
    if marker is not None:
        query_parameters['marker'] = _SERIALIZER.query("marker", marker, 'str')
    if maxresults is not None:
        query_parameters['maxresults'] = _SERIALIZER.query("maxresults", maxresults, 'int', minimum=1)
    if include is not None:
        query_parameters['include'] = _SERIALIZER.query("include", include, '[str]', div=',')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_user_delegation_key_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Retrieves a user delegation key for the Blob service. This is only a valid operation when using
    bearer token authentication.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content:
    :paramtype content: Any
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    restype = "service"
    comp = "userdelegationkey"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_account_info_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Returns the sku name and account kind.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    restype = "account"
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_submit_batch_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Batch operation allows multiple API calls to be embedded into a single HTTP request.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: Initial data.
    :paramtype content: IO
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword multipart_content_type: Required. The value of this header must be multipart/mixed
     with a batch boundary. Example header value: multipart/mixed; boundary=batch_:code:`<GUID>`.
    :paramtype multipart_content_type: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_length = kwargs.pop('content_length')  # type: int
    multipart_content_type = kwargs.pop('multipart_content_type')  # type: str
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    comp = "batch"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['Content-Type'] = _SERIALIZER.header("multipart_content_type", multipart_content_type, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_filter_blobs_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Filter Blobs operation enables callers to list blobs across all containers whose tags match
    a given search expression.  Filter blobs searches across all containers within a storage
    account but can be scoped within the expression to a single container.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword where: Filters the results to return only to return only blobs whose tags match the
     specified expression.
    :paramtype where: str
    :keyword marker: A string value that identifies the portion of the list of containers to be
     returned with the next listing operation. The operation returns the NextMarker value within the
     response body if the listing operation did not return all containers remaining to be listed
     with the current page. The NextMarker value can be used as the value for the marker parameter
     in a subsequent call to request the next page of list items. The marker value is opaque to the
     client.
    :paramtype marker: str
    :keyword maxresults: Specifies the maximum number of containers to return. If the request does
     not specify maxresults, or specifies a value greater than 5000, the server will return up to
     5000 items. Note that if the listing operation crosses a partition boundary, then the service
     will return a continuation token for retrieving the remainder of the results. For this reason,
     it is possible that the service will return fewer results than specified by maxresults, or than
     the default of 5000.
    :paramtype maxresults: int
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    where = kwargs.pop('where', None)  # type: Optional[str]
    marker = kwargs.pop('marker', None)  # type: Optional[str]
    maxresults = kwargs.pop('maxresults', None)  # type: Optional[int]
    comp = "blobs"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if where is not None:
        query_parameters['where'] = _SERIALIZER.query("where", where, 'str')
    if marker is not None:
        query_parameters['marker'] = _SERIALIZER.query("marker", marker, 'str')
    if maxresults is not None:
        query_parameters['maxresults'] = _SERIALIZER.query("maxresults", maxresults, 'int', minimum=1)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

