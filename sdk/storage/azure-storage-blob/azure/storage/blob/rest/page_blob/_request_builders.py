# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING

from azure.storage.blob.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Dict, IO, List, Optional, Union

_SERIALIZER = Serializer()


def build_create_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Create operation creates a new page blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword blob_content_length: This header specifies the maximum size for the page blob, up to 1
     TB. The page blob size must be aligned to a 512-byte boundary.
    :paramtype blob_content_length: long
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword tier: Optional. Indicates the tier to be set on the page blob.
    :paramtype tier: str or ~azure.storage.blob.models.PremiumPageBlobAccessTier
    :keyword blob_content_type: Optional. Sets the blob's content type. If specified, this property
     is stored with the blob and returned with a read request.
    :paramtype blob_content_type: str
    :keyword blob_content_encoding: Optional. Sets the blob's content encoding. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_encoding: str
    :keyword blob_content_language: Optional. Set the blob's content language. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_language: str
    :keyword blob_content_md5: Optional. An MD5 hash of the blob content. Note that this hash is
     not validated, as the hashes for the individual blocks were validated when each was uploaded.
    :paramtype blob_content_md5: bytearray
    :keyword blob_cache_control: Optional. Sets the blob's cache control. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_cache_control: str
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword blob_content_disposition: Optional. Sets the blob's Content-Disposition header.
    :paramtype blob_content_disposition: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword blob_sequence_number: Set for page blobs only. The sequence number is a user-
     controlled value that you can use to track requests. The value of the sequence number must be
     between 0 and 2^63 - 1.
    :paramtype blob_sequence_number: long
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_length = kwargs.pop('content_length')  # type: int
    blob_content_length = kwargs.pop('blob_content_length')  # type: int
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    tier = kwargs.pop('tier', None)  # type: Optional[Union[str, "_models.PremiumPageBlobAccessTier"]]
    blob_content_type = kwargs.pop('blob_content_type', None)  # type: Optional[str]
    blob_content_encoding = kwargs.pop('blob_content_encoding', None)  # type: Optional[str]
    blob_content_language = kwargs.pop('blob_content_language', None)  # type: Optional[str]
    blob_content_md5 = kwargs.pop('blob_content_md5', None)  # type: Optional[bytearray]
    blob_cache_control = kwargs.pop('blob_cache_control', None)  # type: Optional[str]
    metadata = kwargs.pop('metadata', None)  # type: Optional[Dict[str, str]]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    blob_content_disposition = kwargs.pop('blob_content_disposition', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    blob_sequence_number = kwargs.pop('blob_sequence_number', 0)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    blob_tags_string = kwargs.pop('blob_tags_string', None)  # type: Optional[str]
    blob_type = "PageBlob"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['x-ms-blob-content-length'] = _SERIALIZER.header("blob_content_length", blob_content_length, 'long')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_content_md5 is not None:
        header_parameters['x-ms-blob-content-md5'] = _SERIALIZER.header("blob_content_md5", blob_content_md5, 'bytearray')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if blob_content_type is not None:
        header_parameters['x-ms-blob-content-type'] = _SERIALIZER.header("blob_content_type", blob_content_type, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['x-ms-blob-type'] = _SERIALIZER.header("blob_type", blob_type, 'str')
    if blob_content_disposition is not None:
        header_parameters['x-ms-blob-content-disposition'] = _SERIALIZER.header("blob_content_disposition", blob_content_disposition, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if tier is not None:
        header_parameters['x-ms-access-tier'] = _SERIALIZER.header("tier", tier, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if blob_sequence_number is not None:
        header_parameters['x-ms-blob-sequence-number'] = _SERIALIZER.header("blob_sequence_number", blob_sequence_number, 'long')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if blob_content_encoding is not None:
        header_parameters['x-ms-blob-content-encoding'] = _SERIALIZER.header("blob_content_encoding", blob_content_encoding, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if blob_content_language is not None:
        header_parameters['x-ms-blob-content-language'] = _SERIALIZER.header("blob_content_language", blob_content_language, 'str')
    if blob_cache_control is not None:
        header_parameters['x-ms-blob-cache-control'] = _SERIALIZER.header("blob_cache_control", blob_cache_control, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_upload_pages_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Upload Pages operation writes a range of pages to a page blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: Initial data.
    :paramtype content: IO
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword transactional_content_crc64: Specify the transactional crc64 for the body, to be
     validated by the service.
    :paramtype transactional_content_crc64: bytearray
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword range: Return only the bytes of the blob in the specified range.
    :paramtype range: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_sequence_number_less_than_or_equal_to: Specify this header value to operate only on
     a blob if it has a sequence number less than or equal to the specified.
    :paramtype if_sequence_number_less_than_or_equal_to: long
    :keyword if_sequence_number_less_than: Specify this header value to operate only on a blob if
     it has a sequence number less than the specified.
    :paramtype if_sequence_number_less_than: long
    :keyword if_sequence_number_equal_to: Specify this header value to operate only on a blob if it
     has the specified sequence number.
    :paramtype if_sequence_number_equal_to: long
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_length = kwargs.pop('content_length')  # type: int
    transactional_content_md5 = kwargs.pop('transactional_content_md5', None)  # type: Optional[bytearray]
    transactional_content_crc64 = kwargs.pop('transactional_content_crc64', None)  # type: Optional[bytearray]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    range = kwargs.pop('range', None)  # type: Optional[str]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    if_sequence_number_less_than_or_equal_to = kwargs.pop('if_sequence_number_less_than_or_equal_to', None)  # type: Optional[int]
    if_sequence_number_less_than = kwargs.pop('if_sequence_number_less_than', None)  # type: Optional[int]
    if_sequence_number_equal_to = kwargs.pop('if_sequence_number_equal_to', None)  # type: Optional[int]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    content_type = kwargs.pop("content_type", None)
    comp = "page"
    page_write = "update"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_sequence_number_less_than is not None:
        header_parameters['x-ms-if-sequence-number-lt'] = _SERIALIZER.header("if_sequence_number_less_than", if_sequence_number_less_than, 'long')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if if_sequence_number_equal_to is not None:
        header_parameters['x-ms-if-sequence-number-eq'] = _SERIALIZER.header("if_sequence_number_equal_to", if_sequence_number_equal_to, 'long')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if if_sequence_number_less_than_or_equal_to is not None:
        header_parameters['x-ms-if-sequence-number-le'] = _SERIALIZER.header("if_sequence_number_less_than_or_equal_to", if_sequence_number_less_than_or_equal_to, 'long')
    if range is not None:
        header_parameters['x-ms-range'] = _SERIALIZER.header("range", range, 'str')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-page-write'] = _SERIALIZER.header("page_write", page_write, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if transactional_content_crc64 is not None:
        header_parameters['x-ms-content-crc64'] = _SERIALIZER.header("transactional_content_crc64", transactional_content_crc64, 'bytearray')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_clear_pages_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Clear Pages operation clears a set of pages from a page blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword range: Return only the bytes of the blob in the specified range.
    :paramtype range: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_sequence_number_less_than_or_equal_to: Specify this header value to operate only on
     a blob if it has a sequence number less than or equal to the specified.
    :paramtype if_sequence_number_less_than_or_equal_to: long
    :keyword if_sequence_number_less_than: Specify this header value to operate only on a blob if
     it has a sequence number less than the specified.
    :paramtype if_sequence_number_less_than: long
    :keyword if_sequence_number_equal_to: Specify this header value to operate only on a blob if it
     has the specified sequence number.
    :paramtype if_sequence_number_equal_to: long
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_length = kwargs.pop('content_length')  # type: int
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    range = kwargs.pop('range', None)  # type: Optional[str]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    if_sequence_number_less_than_or_equal_to = kwargs.pop('if_sequence_number_less_than_or_equal_to', None)  # type: Optional[int]
    if_sequence_number_less_than = kwargs.pop('if_sequence_number_less_than', None)  # type: Optional[int]
    if_sequence_number_equal_to = kwargs.pop('if_sequence_number_equal_to', None)  # type: Optional[int]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "page"
    page_write = "clear"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_sequence_number_less_than is not None:
        header_parameters['x-ms-if-sequence-number-lt'] = _SERIALIZER.header("if_sequence_number_less_than", if_sequence_number_less_than, 'long')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if if_sequence_number_equal_to is not None:
        header_parameters['x-ms-if-sequence-number-eq'] = _SERIALIZER.header("if_sequence_number_equal_to", if_sequence_number_equal_to, 'long')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if if_sequence_number_less_than_or_equal_to is not None:
        header_parameters['x-ms-if-sequence-number-le'] = _SERIALIZER.header("if_sequence_number_less_than_or_equal_to", if_sequence_number_less_than_or_equal_to, 'long')
    if range is not None:
        header_parameters['x-ms-range'] = _SERIALIZER.header("range", range, 'str')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-page-write'] = _SERIALIZER.header("page_write", page_write, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_upload_pages_from_url_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Upload Pages operation writes a range of pages to a page blob where the contents are read
    from a URL.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword source_url: Specify a URL to the copy source.
    :paramtype source_url: str
    :keyword source_range: Bytes of source data in the specified range. The length of this range
     should match the ContentLength header and x-ms-range/Range destination range header.
    :paramtype source_range: str
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword range: The range of bytes to which the source range would be written. The range should
     be 512 aligned and range-end is required.
    :paramtype range: str
    :keyword source_content_md5: Specify the md5 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_content_md5: bytearray
    :keyword source_contentcrc64: Specify the crc64 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_contentcrc64: bytearray
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_sequence_number_less_than_or_equal_to: Specify this header value to operate only on
     a blob if it has a sequence number less than or equal to the specified.
    :paramtype if_sequence_number_less_than_or_equal_to: long
    :keyword if_sequence_number_less_than: Specify this header value to operate only on a blob if
     it has a sequence number less than the specified.
    :paramtype if_sequence_number_less_than: long
    :keyword if_sequence_number_equal_to: Specify this header value to operate only on a blob if it
     has the specified sequence number.
    :paramtype if_sequence_number_equal_to: long
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    source_url = kwargs.pop('source_url')  # type: str
    source_range = kwargs.pop('source_range')  # type: str
    content_length = kwargs.pop('content_length')  # type: int
    range = kwargs.pop('range')  # type: str
    source_content_md5 = kwargs.pop('source_content_md5', None)  # type: Optional[bytearray]
    source_contentcrc64 = kwargs.pop('source_contentcrc64', None)  # type: Optional[bytearray]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    if_sequence_number_less_than_or_equal_to = kwargs.pop('if_sequence_number_less_than_or_equal_to', None)  # type: Optional[int]
    if_sequence_number_less_than = kwargs.pop('if_sequence_number_less_than', None)  # type: Optional[int]
    if_sequence_number_equal_to = kwargs.pop('if_sequence_number_equal_to', None)  # type: Optional[int]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    source_if_modified_since = kwargs.pop('source_if_modified_since', None)  # type: Optional[datetime.datetime]
    source_if_unmodified_since = kwargs.pop('source_if_unmodified_since', None)  # type: Optional[datetime.datetime]
    source_if_match = kwargs.pop('source_if_match', None)  # type: Optional[str]
    source_if_none_match = kwargs.pop('source_if_none_match', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "page"
    page_write = "update"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if source_content_md5 is not None:
        header_parameters['x-ms-source-content-md5'] = _SERIALIZER.header("source_content_md5", source_content_md5, 'bytearray')
    if if_sequence_number_less_than is not None:
        header_parameters['x-ms-if-sequence-number-lt'] = _SERIALIZER.header("if_sequence_number_less_than", if_sequence_number_less_than, 'long')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("source_url", source_url, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if if_sequence_number_equal_to is not None:
        header_parameters['x-ms-if-sequence-number-eq'] = _SERIALIZER.header("if_sequence_number_equal_to", if_sequence_number_equal_to, 'long')
    header_parameters['x-ms-source-range'] = _SERIALIZER.header("source_range", source_range, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if if_sequence_number_less_than_or_equal_to is not None:
        header_parameters['x-ms-if-sequence-number-le'] = _SERIALIZER.header("if_sequence_number_less_than_or_equal_to", if_sequence_number_less_than_or_equal_to, 'long')
    header_parameters['x-ms-range'] = _SERIALIZER.header("range", range, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if source_contentcrc64 is not None:
        header_parameters['x-ms-source-content-crc64'] = _SERIALIZER.header("source_contentcrc64", source_contentcrc64, 'bytearray')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    header_parameters['x-ms-page-write'] = _SERIALIZER.header("page_write", page_write, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_page_ranges_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot
    of a page blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword range: Return only the bytes of the blob in the specified range.
    :paramtype range: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    snapshot = kwargs.pop('snapshot', None)  # type: Optional[str]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    range = kwargs.pop('range', None)  # type: Optional[str]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "pagelist"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if range is not None:
        header_parameters['x-ms-range'] = _SERIALIZER.header("range", range, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_page_ranges_diff_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that
    were changed between target blob and previous snapshot.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword snapshot: The snapshot parameter is an opaque DateTime value that, when present,
     specifies the blob snapshot to retrieve. For more information on working with blob snapshots,
     see :code:`<a href="https://docs.microsoft.com/en-
     us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating a Snapshot of
     a Blob.</a>`.
    :paramtype snapshot: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword prevsnapshot: Optional in version 2015-07-08 and newer. The prevsnapshot parameter is
     a DateTime value that specifies that the response will contain only pages that were changed
     between target blob and previous snapshot. Changed pages include both updated and cleared
     pages. The target blob may be a snapshot, as long as the snapshot specified by prevsnapshot is
     the older of the two. Note that incremental snapshots are currently supported only for blobs
     created on or after January 1, 2016.
    :paramtype prevsnapshot: str
    :keyword prev_snapshot_url: Optional. This header is only supported in service versions
     2019-04-19 and after and specifies the URL of a previous snapshot of the target blob. The
     response will only contain pages that were changed between the target blob and its previous
     snapshot.
    :paramtype prev_snapshot_url: str
    :keyword range: Return only the bytes of the blob in the specified range.
    :paramtype range: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    snapshot = kwargs.pop('snapshot', None)  # type: Optional[str]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    prevsnapshot = kwargs.pop('prevsnapshot', None)  # type: Optional[str]
    prev_snapshot_url = kwargs.pop('prev_snapshot_url', None)  # type: Optional[str]
    range = kwargs.pop('range', None)  # type: Optional[str]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "pagelist"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if snapshot is not None:
        query_parameters['snapshot'] = _SERIALIZER.query("snapshot", snapshot, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if prevsnapshot is not None:
        query_parameters['prevsnapshot'] = _SERIALIZER.query("prevsnapshot", prevsnapshot, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if prev_snapshot_url is not None:
        header_parameters['x-ms-previous-snapshot-url'] = _SERIALIZER.header("prev_snapshot_url", prev_snapshot_url, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if range is not None:
        header_parameters['x-ms-range'] = _SERIALIZER.header("range", range, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_resize_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Resize the Blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword blob_content_length: This header specifies the maximum size for the page blob, up to 1
     TB. The page blob size must be aligned to a 512-byte boundary.
    :paramtype blob_content_length: long
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    blob_content_length = kwargs.pop('blob_content_length')  # type: int
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    encryption_key = kwargs.pop('encryption_key', None)  # type: Optional[str]
    encryption_key_sha256 = kwargs.pop('encryption_key_sha256', None)  # type: Optional[str]
    encryption_algorithm = kwargs.pop('encryption_algorithm', "AES256")  # type: Optional[str]
    encryption_scope = kwargs.pop('encryption_scope', None)  # type: Optional[str]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-blob-content-length'] = _SERIALIZER.header("blob_content_length", blob_content_length, 'long')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_sequence_number_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Update the sequence number of the blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword sequence_number_action: Required if the x-ms-blob-sequence-number header is set for
     the request. This property applies to page blobs only. This property indicates how the service
     should modify the blob's sequence number.
    :paramtype sequence_number_action: str or ~azure.storage.blob.models.SequenceNumberActionType
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword blob_sequence_number: Set for page blobs only. The sequence number is a user-
     controlled value that you can use to track requests. The value of the sequence number must be
     between 0 and 2^63 - 1.
    :paramtype blob_sequence_number: long
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    sequence_number_action = kwargs.pop('sequence_number_action')  # type: Union[str, "_models.SequenceNumberActionType"]
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    lease_id = kwargs.pop('lease_id', None)  # type: Optional[str]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    blob_sequence_number = kwargs.pop('blob_sequence_number', 0)  # type: Optional[int]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "properties"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_sequence_number is not None:
        header_parameters['x-ms-blob-sequence-number'] = _SERIALIZER.header("blob_sequence_number", blob_sequence_number, 'long')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    header_parameters['x-ms-sequence-number-action'] = _SERIALIZER.header("sequence_number_action", sequence_number_action, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_copy_incremental_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """The Copy Incremental operation copies a snapshot of the source page blob to a destination page
    blob. The snapshot is copied such that only the differential changes between the previously
    copied snapshot are transferred to the destination. The copied snapshots are complete copies of
    the original snapshot and can be read or copied from as usual. This API is supported since REST
    version 2016-05-31.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword copy_source: Specifies the name of the source page blob snapshot. This value is a URL
     of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as
     it would appear in a request URI. The source blob must either be public or must be
     authenticated via a shared access signature.
    :paramtype copy_source: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    copy_source = kwargs.pop('copy_source')  # type: str
    timeout = kwargs.pop('timeout', None)  # type: Optional[int]
    if_modified_since = kwargs.pop('if_modified_since', None)  # type: Optional[datetime.datetime]
    if_unmodified_since = kwargs.pop('if_unmodified_since', None)  # type: Optional[datetime.datetime]
    if_match = kwargs.pop('if_match', None)  # type: Optional[str]
    if_none_match = kwargs.pop('if_none_match', None)  # type: Optional[str]
    if_tags = kwargs.pop('if_tags', None)  # type: Optional[str]
    request_id_parameter = kwargs.pop('request_id_parameter', None)  # type: Optional[str]
    comp = "incrementalcopy"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("copy_source", copy_source, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

