# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Dict, IO, List, Optional, Union

from azure.storage.blob.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_create_request(
    *,
    timeout: Optional[int] = None,
    directory_properties: Optional[str] = None,
    posix_permissions: Optional[str] = None,
    posix_umask: Optional[str] = None,
    cache_control: Optional[str] = None,
    content_type: Optional[str] = None,
    content_encoding: Optional[str] = None,
    content_language: Optional[str] = None,
    content_disposition: Optional[str] = None,
    lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Create a directory. By default, the destination is overwritten and if the destination already
    exists and has a lease the lease is broken. This operation supports conditional HTTP requests.
    For more information, see `Specifying Conditional Headers for Blob Service Operations
    <https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-
    blob-service-operations>`_.  To fail if the destination already exists, use a conditional
    request with If-None-Match: "*".

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword directory_properties: Optional.  User-defined properties to be stored with the file or
     directory, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...",
     where each value is base64 encoded.
    :paramtype directory_properties: str
    :keyword posix_permissions: Optional and only valid if Hierarchical Namespace is enabled for
     the account. Sets POSIX access permissions for the file owner, the file owning group, and
     others. Each class may be granted read, write, or execute permission.  The sticky bit is also
     supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
    :paramtype posix_permissions: str
    :keyword posix_umask: Only valid if Hierarchical Namespace is enabled for the account. This
     umask restricts permission settings for file and directory, and will only be applied when
     default Acl does not exist in parent directory. If the umask bit has set, it means that the
     corresponding permission will be disabled. Otherwise the corresponding permission will be
     determined by the permission. A 4-digit octal notation (e.g. 0022) is supported here. If no
     umask was specified, a default umask - 0027 will be used.
    :paramtype posix_umask: str
    :keyword cache_control: Cache control for given resource.
    :paramtype cache_control: str
    :keyword content_type: Content type for given resource.
    :paramtype content_type: str
    :keyword content_encoding: Content encoding for given resource.
    :paramtype content_encoding: str
    :keyword content_language: Content language for given resource.
    :paramtype content_language: str
    :keyword content_disposition: Content disposition for given resource.
    :paramtype content_disposition: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    resource = "directory"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['resource'] = _SERIALIZER.query("resource", resource, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if content_encoding is not None:
        header_parameters['x-ms-content-encoding'] = _SERIALIZER.header("content_encoding", content_encoding, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if content_disposition is not None:
        header_parameters['x-ms-content-disposition'] = _SERIALIZER.header("content_disposition", content_disposition, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if directory_properties is not None:
        header_parameters['x-ms-properties'] = _SERIALIZER.header("directory_properties", directory_properties, 'str')
    if cache_control is not None:
        header_parameters['x-ms-cache-control'] = _SERIALIZER.header("cache_control", cache_control, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if posix_permissions is not None:
        header_parameters['x-ms-permissions'] = _SERIALIZER.header("posix_permissions", posix_permissions, 'str')
    if posix_umask is not None:
        header_parameters['x-ms-umask'] = _SERIALIZER.header("posix_umask", posix_umask, 'str')
    if content_type is not None:
        header_parameters['x-ms-content-type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if content_language is not None:
        header_parameters['x-ms-content-language'] = _SERIALIZER.header("content_language", content_language, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_rename_request(
    *,
    rename_source: str,
    timeout: Optional[int] = None,
    marker: Optional[str] = None,
    path_rename_mode: Optional[Union[str, "_models.PathRenameMode"]] = None,
    directory_properties: Optional[str] = None,
    posix_permissions: Optional[str] = None,
    posix_umask: Optional[str] = None,
    cache_control: Optional[str] = None,
    content_type: Optional[str] = None,
    content_encoding: Optional[str] = None,
    content_language: Optional[str] = None,
    content_disposition: Optional[str] = None,
    lease_id: Optional[str] = None,
    source_lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    source_if_modified_since: Optional[datetime.datetime] = None,
    source_if_unmodified_since: Optional[datetime.datetime] = None,
    source_if_match: Optional[str] = None,
    source_if_none_match: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Rename a directory. By default, the destination is overwritten and if the destination already
    exists and has a lease the lease is broken. This operation supports conditional HTTP requests.
    For more information, see `Specifying Conditional Headers for Blob Service Operations
    <https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-
    blob-service-operations>`_. To fail if the destination already exists, use a conditional
    request with If-None-Match: "*".

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword rename_source: The file or directory to be renamed. The value must have the following
     format: "/{filesysystem}/{path}".  If "x-ms-properties" is specified, the properties will
     overwrite the existing properties; otherwise, the existing properties will be preserved.
    :paramtype rename_source: str
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword marker: When renaming a directory, the number of paths that are renamed with each
     invocation is limited.  If the number of paths to be renamed exceeds this limit, a continuation
     token is returned in this response header.  When a continuation token is returned in the
     response, it must be specified in a subsequent invocation of the rename operation to continue
     renaming the directory.
    :paramtype marker: str
    :keyword path_rename_mode: Determines the behavior of the rename operation.
    :paramtype path_rename_mode: str or ~azure.storage.blob.models.PathRenameMode
    :keyword directory_properties: Optional.  User-defined properties to be stored with the file or
     directory, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...",
     where each value is base64 encoded.
    :paramtype directory_properties: str
    :keyword posix_permissions: Optional and only valid if Hierarchical Namespace is enabled for
     the account. Sets POSIX access permissions for the file owner, the file owning group, and
     others. Each class may be granted read, write, or execute permission.  The sticky bit is also
     supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
    :paramtype posix_permissions: str
    :keyword posix_umask: Only valid if Hierarchical Namespace is enabled for the account. This
     umask restricts permission settings for file and directory, and will only be applied when
     default Acl does not exist in parent directory. If the umask bit has set, it means that the
     corresponding permission will be disabled. Otherwise the corresponding permission will be
     determined by the permission. A 4-digit octal notation (e.g. 0022) is supported here. If no
     umask was specified, a default umask - 0027 will be used.
    :paramtype posix_umask: str
    :keyword cache_control: Cache control for given resource.
    :paramtype cache_control: str
    :keyword content_type: Content type for given resource.
    :paramtype content_type: str
    :keyword content_encoding: Content encoding for given resource.
    :paramtype content_encoding: str
    :keyword content_language: Content language for given resource.
    :paramtype content_language: str
    :keyword content_disposition: Content disposition for given resource.
    :paramtype content_disposition: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword source_lease_id: A lease ID for the source path. If specified, the source path must
     have an active lease and the lease ID must match.
    :paramtype source_lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if marker is not None:
        query_parameters['continuation'] = _SERIALIZER.query("marker", marker, 'str')
    if path_rename_mode is not None:
        query_parameters['mode'] = _SERIALIZER.query("path_rename_mode", path_rename_mode, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if content_disposition is not None:
        header_parameters['x-ms-content-disposition'] = _SERIALIZER.header("content_disposition", content_disposition, 'str')
    if cache_control is not None:
        header_parameters['x-ms-cache-control'] = _SERIALIZER.header("cache_control", cache_control, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if posix_permissions is not None:
        header_parameters['x-ms-permissions'] = _SERIALIZER.header("posix_permissions", posix_permissions, 'str')
    if content_type is not None:
        header_parameters['x-ms-content-type'] = _SERIALIZER.header("content_type", content_type, 'str')
    if content_language is not None:
        header_parameters['x-ms-content-language'] = _SERIALIZER.header("content_language", content_language, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if source_lease_id is not None:
        header_parameters['x-ms-source-lease-id'] = _SERIALIZER.header("source_lease_id", source_lease_id, 'str')
    if content_encoding is not None:
        header_parameters['x-ms-content-encoding'] = _SERIALIZER.header("content_encoding", content_encoding, 'str')
    if posix_umask is not None:
        header_parameters['x-ms-umask'] = _SERIALIZER.header("posix_umask", posix_umask, 'str')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-rename-source'] = _SERIALIZER.header("rename_source", rename_source, 'str')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if directory_properties is not None:
        header_parameters['x-ms-properties'] = _SERIALIZER.header("directory_properties", directory_properties, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_request(
    *,
    recursive_directory_delete: bool,
    timeout: Optional[int] = None,
    marker: Optional[str] = None,
    lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Deletes the directory.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword recursive_directory_delete: If "true", all paths beneath the directory will be
     deleted. If "false" and the directory is non-empty, an error occurs.
    :paramtype recursive_directory_delete: bool
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword marker: When renaming a directory, the number of paths that are renamed with each
     invocation is limited.  If the number of paths to be renamed exceeds this limit, a continuation
     token is returned in this response header.  When a continuation token is returned in the
     response, it must be specified in a subsequent invocation of the rename operation to continue
     renaming the directory.
    :paramtype marker: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    query_parameters['recursive'] = _SERIALIZER.query("recursive_directory_delete", recursive_directory_delete, 'bool')
    if marker is not None:
        query_parameters['continuation'] = _SERIALIZER.query("marker", marker, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_access_control_request(
    *,
    timeout: Optional[int] = None,
    lease_id: Optional[str] = None,
    owner: Optional[str] = None,
    group: Optional[str] = None,
    posix_permissions: Optional[str] = None,
    posix_acl: Optional[str] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Set the owner, group, permissions, or access control list for a directory.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword owner: Optional. The owner of the blob or directory.
    :paramtype owner: str
    :keyword group: Optional. The owning group of the blob or directory.
    :paramtype group: str
    :keyword posix_permissions: Optional and only valid if Hierarchical Namespace is enabled for
     the account. Sets POSIX access permissions for the file owner, the file owning group, and
     others. Each class may be granted read, write, or execute permission.  The sticky bit is also
     supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
    :paramtype posix_permissions: str
    :keyword posix_acl: Sets POSIX access control rights on files and directories. The value is a
     comma-separated list of access control entries. Each access control entry (ACE) consists of a
     scope, a type, a user or group identifier, and permissions in the format
     "[scope:][type]:[id]:[permissions]".
    :paramtype posix_acl: str
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    action = "setAccessControl"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if group is not None:
        header_parameters['x-ms-group'] = _SERIALIZER.header("group", group, 'str')
    if posix_acl is not None:
        header_parameters['x-ms-acl'] = _SERIALIZER.header("posix_acl", posix_acl, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if owner is not None:
        header_parameters['x-ms-owner'] = _SERIALIZER.header("owner", owner, 'str')
    if posix_permissions is not None:
        header_parameters['x-ms-permissions'] = _SERIALIZER.header("posix_permissions", posix_permissions, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_access_control_request(
    *,
    timeout: Optional[int] = None,
    upn: Optional[bool] = None,
    lease_id: Optional[str] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Get the owner, group, permissions, or access control list for a directory.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword upn: Optional. Valid only when Hierarchical Namespace is enabled for the account. If
     "true", the identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
     headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If
     "false", the values will be returned as Azure Active Directory Object IDs. The default value is
     false.
    :paramtype upn: bool
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    action = "getAccessControl"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{filesystem}/{path}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)
    if upn is not None:
        query_parameters['upn'] = _SERIALIZER.query("upn", upn, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="HEAD",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

