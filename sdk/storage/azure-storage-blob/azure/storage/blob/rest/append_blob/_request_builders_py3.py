# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Dict, IO, List, Optional, Union

from azure.storage.blob.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_create_request(
    *,
    content_length: int,
    timeout: Optional[int] = None,
    blob_content_type: Optional[str] = None,
    blob_content_encoding: Optional[str] = None,
    blob_content_language: Optional[str] = None,
    blob_content_md5: Optional[bytearray] = None,
    blob_cache_control: Optional[str] = None,
    metadata: Optional[Dict[str, str]] = None,
    lease_id: Optional[str] = None,
    blob_content_disposition: Optional[str] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    encryption_scope: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    blob_tags_string: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Create Append Blob operation creates a new append blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword blob_content_type: Optional. Sets the blob's content type. If specified, this property
     is stored with the blob and returned with a read request.
    :paramtype blob_content_type: str
    :keyword blob_content_encoding: Optional. Sets the blob's content encoding. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_encoding: str
    :keyword blob_content_language: Optional. Set the blob's content language. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_content_language: str
    :keyword blob_content_md5: Optional. An MD5 hash of the blob content. Note that this hash is
     not validated, as the hashes for the individual blocks were validated when each was uploaded.
    :paramtype blob_content_md5: bytearray
    :keyword blob_cache_control: Optional. Sets the blob's cache control. If specified, this
     property is stored with the blob and returned with a read request.
    :paramtype blob_cache_control: str
    :keyword metadata: Optional. Specifies a user-defined name-value pair associated with the blob.
     If no name-value pairs are specified, the operation will copy the metadata from the source blob
     or file to the destination blob. If one or more name-value pairs are specified, the destination
     blob is created with the specified metadata, and metadata is not copied from the source blob or
     file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming
     rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more
     information.
    :paramtype metadata: dict[str, str]
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword blob_content_disposition: Optional. Sets the blob's Content-Disposition header.
    :paramtype blob_content_disposition: str
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword blob_tags_string: Optional.  Used to set blob tags in various blob operations.
    :paramtype blob_tags_string: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    blob_type = "AppendBlob"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if blob_content_md5 is not None:
        header_parameters['x-ms-blob-content-md5'] = _SERIALIZER.header("blob_content_md5", blob_content_md5, 'bytearray')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if blob_content_type is not None:
        header_parameters['x-ms-blob-content-type'] = _SERIALIZER.header("blob_content_type", blob_content_type, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    header_parameters['x-ms-blob-type'] = _SERIALIZER.header("blob_type", blob_type, 'str')
    if blob_content_disposition is not None:
        header_parameters['x-ms-blob-content-disposition'] = _SERIALIZER.header("blob_content_disposition", blob_content_disposition, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if metadata is not None:
        header_parameters['x-ms-meta'] = _SERIALIZER.header("metadata", metadata, '{str}')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if blob_tags_string is not None:
        header_parameters['x-ms-tags'] = _SERIALIZER.header("blob_tags_string", blob_tags_string, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if blob_content_encoding is not None:
        header_parameters['x-ms-blob-content-encoding'] = _SERIALIZER.header("blob_content_encoding", blob_content_encoding, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if blob_content_language is not None:
        header_parameters['x-ms-blob-content-language'] = _SERIALIZER.header("blob_content_language", blob_content_language, 'str')
    if blob_cache_control is not None:
        header_parameters['x-ms-blob-cache-control'] = _SERIALIZER.header("blob_cache_control", blob_cache_control, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_append_block_request(
    *,
    content: Optional[IO] = None,
    content_length: int,
    timeout: Optional[int] = None,
    transactional_content_md5: Optional[bytearray] = None,
    transactional_content_crc64: Optional[bytearray] = None,
    lease_id: Optional[str] = None,
    max_size: Optional[int] = None,
    append_position: Optional[int] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    encryption_scope: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Append Block operation commits a new block of data to the end of an existing append blob.
    The Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
    AppendBlob. Append Block is supported only on version 2015-02-21 version or later.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword content: Initial data.
    :paramtype content: IO
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword transactional_content_crc64: Specify the transactional crc64 for the body, to be
     validated by the service.
    :paramtype transactional_content_crc64: bytearray
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword max_size: Optional conditional header. The max length in bytes permitted for the
     append blob. If the Append Block operation would cause the blob to exceed that limit or if the
     blob size is already greater than the value specified in this header, the request will fail
     with MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).
    :paramtype max_size: long
    :keyword append_position: Optional conditional header, used only for the Append Block
     operation. A number indicating the byte offset to compare. Append Block will succeed only if
     the append position is equal to this number. If it is not, the request will fail with the
     AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
    :paramtype append_position: long
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    comp = "appendblock"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if max_size is not None:
        header_parameters['x-ms-blob-condition-maxsize'] = _SERIALIZER.header("max_size", max_size, 'long')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if append_position is not None:
        header_parameters['x-ms-blob-condition-appendpos'] = _SERIALIZER.header("append_position", append_position, 'long')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if transactional_content_crc64 is not None:
        header_parameters['x-ms-content-crc64'] = _SERIALIZER.header("transactional_content_crc64", transactional_content_crc64, 'bytearray')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        content=content,
        **kwargs
    )


def build_append_block_from_url_request(
    *,
    source_url: str,
    content_length: int,
    source_range: Optional[str] = None,
    source_content_md5: Optional[bytearray] = None,
    source_contentcrc64: Optional[bytearray] = None,
    timeout: Optional[int] = None,
    transactional_content_md5: Optional[bytearray] = None,
    encryption_key: Optional[str] = None,
    encryption_key_sha256: Optional[str] = None,
    encryption_algorithm: Optional[str] = "AES256",
    encryption_scope: Optional[str] = None,
    lease_id: Optional[str] = None,
    max_size: Optional[int] = None,
    append_position: Optional[int] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_tags: Optional[str] = None,
    source_if_modified_since: Optional[datetime.datetime] = None,
    source_if_unmodified_since: Optional[datetime.datetime] = None,
    source_if_match: Optional[str] = None,
    source_if_none_match: Optional[str] = None,
    request_id_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Append Block operation commits a new block of data to the end of an existing append blob
    where the contents are read from a source url. The Append Block operation is permitted only if
    the blob was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on
    version 2015-02-21 version or later.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword source_url: Specify a URL to the copy source.
    :paramtype source_url: str
    :keyword content_length: The length of the request.
    :paramtype content_length: long
    :keyword source_range: Bytes of source data in the specified range.
    :paramtype source_range: str
    :keyword source_content_md5: Specify the md5 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_content_md5: bytearray
    :keyword source_contentcrc64: Specify the crc64 calculated for the range of bytes that must be
     read from the copy source.
    :paramtype source_contentcrc64: bytearray
    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword transactional_content_md5: Specify the transactional md5 for the body, to be validated
     by the service.
    :paramtype transactional_content_md5: bytearray
    :keyword encryption_key: Optional. Specifies the encryption key to use to encrypt the data
     provided in the request. If not specified, encryption is performed with the root account
     encryption key.  For more information, see Encryption at Rest for Azure Storage Services.
    :paramtype encryption_key: str
    :keyword encryption_key_sha256: The SHA-256 hash of the provided encryption key. Must be
     provided if the x-ms-encryption-key header is provided.
    :paramtype encryption_key_sha256: str
    :keyword encryption_algorithm: The algorithm used to produce the encryption key hash.
     Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key
     header is provided.
    :paramtype encryption_algorithm: str
    :keyword encryption_scope: Optional. Version 2019-07-07 and later.  Specifies the name of the
     encryption scope to use to encrypt the data provided in the request. If not specified,
     encryption is performed with the default account encryption scope.  For more information, see
     Encryption at Rest for Azure Storage Services.
    :paramtype encryption_scope: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword max_size: Optional conditional header. The max length in bytes permitted for the
     append blob. If the Append Block operation would cause the blob to exceed that limit or if the
     blob size is already greater than the value specified in this header, the request will fail
     with MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).
    :paramtype max_size: long
    :keyword append_position: Optional conditional header, used only for the Append Block
     operation. A number indicating the byte offset to compare. Append Block will succeed only if
     the append position is equal to this number. If it is not, the request will fail with the
     AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
    :paramtype append_position: long
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword if_tags: Specify a SQL where clause on blob tags to operate only on blobs with a
     matching value.
    :paramtype if_tags: str
    :keyword source_if_modified_since: Specify this header value to operate only on a blob if it
     has been modified since the specified date/time.
    :paramtype source_if_modified_since: ~datetime.datetime
    :keyword source_if_unmodified_since: Specify this header value to operate only on a blob if it
     has not been modified since the specified date/time.
    :paramtype source_if_unmodified_since: ~datetime.datetime
    :keyword source_if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype source_if_match: str
    :keyword source_if_none_match: Specify an ETag value to operate only on blobs without a
     matching value.
    :paramtype source_if_none_match: str
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "appendblock"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if source_content_md5 is not None:
        header_parameters['x-ms-source-content-md5'] = _SERIALIZER.header("source_content_md5", source_content_md5, 'bytearray')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    header_parameters['x-ms-copy-source'] = _SERIALIZER.header("source_url", source_url, 'str')
    if encryption_algorithm is not None:
        header_parameters['x-ms-encryption-algorithm'] = _SERIALIZER.header("encryption_algorithm", encryption_algorithm, 'str')
    if source_range is not None:
        header_parameters['x-ms-source-range'] = _SERIALIZER.header("source_range", source_range, 'str')
    if encryption_scope is not None:
        header_parameters['x-ms-encryption-scope'] = _SERIALIZER.header("encryption_scope", encryption_scope, 'str')
    if source_if_match is not None:
        header_parameters['x-ms-source-if-match'] = _SERIALIZER.header("source_if_match", source_if_match, 'str')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if encryption_key_sha256 is not None:
        header_parameters['x-ms-encryption-key-sha256'] = _SERIALIZER.header("encryption_key_sha256", encryption_key_sha256, 'str')
    if transactional_content_md5 is not None:
        header_parameters['Content-MD5'] = _SERIALIZER.header("transactional_content_md5", transactional_content_md5, 'bytearray')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    if max_size is not None:
        header_parameters['x-ms-blob-condition-maxsize'] = _SERIALIZER.header("max_size", max_size, 'long')
    if if_tags is not None:
        header_parameters['x-ms-if-tags'] = _SERIALIZER.header("if_tags", if_tags, 'str')
    header_parameters['Content-Length'] = _SERIALIZER.header("content_length", content_length, 'long')
    if append_position is not None:
        header_parameters['x-ms-blob-condition-appendpos'] = _SERIALIZER.header("append_position", append_position, 'long')
    if source_if_modified_since is not None:
        header_parameters['x-ms-source-if-modified-since'] = _SERIALIZER.header("source_if_modified_since", source_if_modified_since, 'rfc-1123')
    if source_contentcrc64 is not None:
        header_parameters['x-ms-source-content-crc64'] = _SERIALIZER.header("source_contentcrc64", source_contentcrc64, 'bytearray')
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if source_if_unmodified_since is not None:
        header_parameters['x-ms-source-if-unmodified-since'] = _SERIALIZER.header("source_if_unmodified_since", source_if_unmodified_since, 'rfc-1123')
    if source_if_none_match is not None:
        header_parameters['x-ms-source-if-none-match'] = _SERIALIZER.header("source_if_none_match", source_if_none_match, 'str')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    if encryption_key is not None:
        header_parameters['x-ms-encryption-key'] = _SERIALIZER.header("encryption_key", encryption_key, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_seal_request(
    *,
    timeout: Optional[int] = None,
    request_id_parameter: Optional[str] = None,
    lease_id: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    append_position: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    """The Seal operation seals the Append Blob to make it read-only. Seal is supported only on
    version 2019-12-12 version or later.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword timeout: The timeout parameter is expressed in seconds. For more information, see
     :code:`<a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-
     timeouts-for-blob-service-operations">Setting Timeouts for Blob Service Operations.</a>`.
    :paramtype timeout: int
    :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
     limit that is recorded in the analytics logs when storage analytics logging is enabled.
    :paramtype request_id_parameter: str
    :keyword lease_id: If specified, the operation only succeeds if the resource's lease is active
     and matches this ID.
    :paramtype lease_id: str
    :keyword if_modified_since: Specify this header value to operate only on a blob if it has been
     modified since the specified date/time.
    :paramtype if_modified_since: ~datetime.datetime
    :keyword if_unmodified_since: Specify this header value to operate only on a blob if it has not
     been modified since the specified date/time.
    :paramtype if_unmodified_since: ~datetime.datetime
    :keyword if_match: Specify an ETag value to operate only on blobs with a matching value.
    :paramtype if_match: str
    :keyword if_none_match: Specify an ETag value to operate only on blobs without a matching
     value.
    :paramtype if_none_match: str
    :keyword append_position: Optional conditional header, used only for the Append Block
     operation. A number indicating the byte offset to compare. Append Block will succeed only if
     the append position is equal to this number. If it is not, the request will fail with the
     AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
    :paramtype append_position: long
    :return: Returns an :class:`~azure.storage.blob.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.storage.blob.core.rest.HttpRequest
    """
    comp = "seal"
    accept = "application/xml"

    # Construct URL
    url = kwargs.pop("template_url", '/{containerName}/{blob}')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    if timeout is not None:
        query_parameters['timeout'] = _SERIALIZER.query("timeout", timeout, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_modified_since is not None:
        header_parameters['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    header_parameters['x-ms-version'] = _SERIALIZER.header("version", version, 'str')
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_unmodified_since is not None:
        header_parameters['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if append_position is not None:
        header_parameters['x-ms-blob-condition-appendpos'] = _SERIALIZER.header("append_position", append_position, 'long')
    if request_id_parameter is not None:
        header_parameters['x-ms-client-request-id'] = _SERIALIZER.header("request_id_parameter", request_id_parameter, 'str')
    if lease_id is not None:
        header_parameters['x-ms-lease-id'] = _SERIALIZER.header("lease_id", lease_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

