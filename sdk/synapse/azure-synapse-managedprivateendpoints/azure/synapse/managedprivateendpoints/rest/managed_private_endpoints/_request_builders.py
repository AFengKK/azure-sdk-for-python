# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.synapse.managedprivateendpoints.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()


def build_get_request(
    managed_private_endpoint_name,  # type: str
    managed_virtual_network_name="default",  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get Managed Private Endpoints.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param managed_private_endpoint_name: Managed private endpoint name.
    :type managed_private_endpoint_name: str
    :param managed_virtual_network_name: Managed virtual network name.
    :type managed_virtual_network_name: str
    :return: Returns an :class:`~azure.synapse.managedprivateendpoints.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.managedprivateendpoints.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "connectionState": {
                        "actionsRequired": "str (optional)",
                        "description": "str (optional)",
                        "status": "str (optional)"
                    },
                    "groupId": "str (optional)",
                    "isReserved": "bool (optional)",
                    "privateLinkResourceId": "str (optional)",
                    "provisioningState": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    )
    path_format_arguments = {
        "managedVirtualNetworkName": _SERIALIZER.url(
            "managed_virtual_network_name", managed_virtual_network_name, "str"
        ),
        "managedPrivateEndpointName": _SERIALIZER.url(
            "managed_private_endpoint_name", managed_private_endpoint_name, "str"
        ),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_create_request(
    managed_private_endpoint_name,  # type: str
    managed_virtual_network_name="default",  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Create Managed Private Endpoints.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param managed_private_endpoint_name: Managed private endpoint name.
    :type managed_private_endpoint_name: str
    :param managed_virtual_network_name: Managed virtual network name.
    :type managed_virtual_network_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Managed private endpoint properties.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Managed private endpoint properties.
    :paramtype content: Any
    :return: Returns an :class:`~azure.synapse.managedprivateendpoints.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.managedprivateendpoints.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "id": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "connectionState": {
                        "actionsRequired": "str (optional)",
                        "description": "str (optional)",
                        "status": "str (optional)"
                    },
                    "groupId": "str (optional)",
                    "isReserved": "bool (optional)",
                    "privateLinkResourceId": "str (optional)",
                    "provisioningState": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "connectionState": {
                        "actionsRequired": "str (optional)",
                        "description": "str (optional)",
                        "status": "str (optional)"
                    },
                    "groupId": "str (optional)",
                    "isReserved": "bool (optional)",
                    "privateLinkResourceId": "str (optional)",
                    "provisioningState": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]
    json = kwargs.pop("json", None)  # type: Any

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    )
    path_format_arguments = {
        "managedVirtualNetworkName": _SERIALIZER.url(
            "managed_virtual_network_name", managed_virtual_network_name, "str"
        ),
        "managedPrivateEndpointName": _SERIALIZER.url(
            "managed_private_endpoint_name", managed_private_endpoint_name, "str"
        ),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_delete_request(
    managed_private_endpoint_name,  # type: str
    managed_virtual_network_name="default",  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete Managed Private Endpoints.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param managed_private_endpoint_name: Managed private endpoint name.
    :type managed_private_endpoint_name: str
    :param managed_virtual_network_name: Managed virtual network name.
    :type managed_virtual_network_name: str
    :return: Returns an :class:`~azure.synapse.managedprivateendpoints.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.managedprivateendpoints.core.rest.HttpRequest
    """

    api_version = "2020-12-01"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    )
    path_format_arguments = {
        "managedVirtualNetworkName": _SERIALIZER.url(
            "managed_virtual_network_name", managed_virtual_network_name, "str"
        ),
        "managedPrivateEndpointName": _SERIALIZER.url(
            "managed_private_endpoint_name", managed_private_endpoint_name, "str"
        ),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=url, params=query_parameters, **kwargs)


def build_list_request(
    managed_virtual_network_name="default",  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List Managed Private Endpoints.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param managed_virtual_network_name: Managed virtual network name.
    :type managed_virtual_network_name: str
    :return: Returns an :class:`~azure.synapse.managedprivateendpoints.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.managedprivateendpoints.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "str (optional)",
                "value": [
                    {
                        "id": "str (optional)",
                        "name": "str (optional)",
                        "properties": {
                            "connectionState": {
                                "actionsRequired": "str (optional)",
                                "description": "str (optional)",
                                "status": "str (optional)"
                            },
                            "groupId": "str (optional)",
                            "isReserved": "bool (optional)",
                            "privateLinkResourceId": "str (optional)",
                            "provisioningState": "str (optional)"
                        },
                        "type": "str (optional)"
                    }
                ]
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints")
    path_format_arguments = {
        "managedVirtualNetworkName": _SERIALIZER.url(
            "managed_virtual_network_name", managed_virtual_network_name, "str"
        ),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)
