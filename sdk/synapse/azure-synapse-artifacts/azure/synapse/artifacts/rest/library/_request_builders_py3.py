# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Dict, IO, Optional

from azure.core.pipeline.transport._base import _format_url_section
from azure.synapse.artifacts.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_list_request(**kwargs: Any) -> HttpRequest:
    """Lists Library.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "str (optional)",
                "value": [
                    {
                        "etag": "str (optional)",
                        "id": "str (optional)",
                        "name": "str (optional)",
                        "properties": {
                            "containerName": "str (optional)",
                            "creatorId": "str (optional)",
                            "name": "str (optional)",
                            "path": "str (optional)",
                            "provisioningStatus": "str (optional)",
                            "type": "str (optional)",
                            "uploadedTimestamp": "str (optional)"
                        },
                        "type": "str (optional)"
                    }
                ]
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraries")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_flush_request_initial(library_name: str, **kwargs: Any) -> HttpRequest:
    """Flush Library.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param library_name: file name to upload. Minimum length of the filename should be 1 excluding
     the extension length.
    :type library_name: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 202
            response.json() == {
                "artifactId": "str (optional)",
                "changed": "str (optional)",
                "created": "str (optional)",
                "id": "str (optional)",
                "name": "str (optional)",
                "operationId": "str (optional)",
                "recordId": "int (optional)",
                "state": "str (optional)",
                "type": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraries/{libraryName}/flush")
    path_format_arguments = {
        "libraryName": _SERIALIZER.url("library_name", library_name, "str", max_length=100, min_length=0),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_get_operation_result_request(operation_id: str, **kwargs: Any) -> HttpRequest:
    """Get Operation result for Library.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param operation_id: operation id for which status is requested.
    :type operation_id: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "etag": "str (optional)",
                "id": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "containerName": "str (optional)",
                    "creatorId": "str (optional)",
                    "name": "str (optional)",
                    "path": "str (optional)",
                    "provisioningStatus": "str (optional)",
                    "type": "str (optional)",
                    "uploadedTimestamp": "str (optional)"
                },
                "type": "str (optional)"
            }
            # response body for status code(s): 202
            response.json() == {
                "code": "str (optional)",
                "details": [
                    {
                        "code": "str",
                        "details": [
                            "..."
                        ],
                        "message": "str",
                        "target": "str (optional)"
                    }
                ],
                "message": "str (optional)",
                "status": "str (optional)",
                "target": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraryOperationResults/{operationId}")
    path_format_arguments = {
        "operationId": _SERIALIZER.url("operation_id", operation_id, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_delete_request_initial(library_name: str, **kwargs: Any) -> HttpRequest:
    """Delete Library.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param library_name: file name to upload. Minimum length of the filename should be 1 excluding
     the extension length.
    :type library_name: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 202
            response.json() == {
                "artifactId": "str (optional)",
                "changed": "str (optional)",
                "created": "str (optional)",
                "id": "str (optional)",
                "name": "str (optional)",
                "operationId": "str (optional)",
                "recordId": "int (optional)",
                "state": "str (optional)",
                "type": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraries/{libraryName}")
    path_format_arguments = {
        "libraryName": _SERIALIZER.url("library_name", library_name, "str", max_length=100, min_length=0),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_get_request(library_name: str, **kwargs: Any) -> HttpRequest:
    """Get Library.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param library_name: file name to upload. Minimum length of the filename should be 1 excluding
     the extension length.
    :type library_name: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "etag": "str (optional)",
                "id": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "containerName": "str (optional)",
                    "creatorId": "str (optional)",
                    "name": "str (optional)",
                    "path": "str (optional)",
                    "provisioningStatus": "str (optional)",
                    "type": "str (optional)",
                    "uploadedTimestamp": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraries/{libraryName}")
    path_format_arguments = {
        "libraryName": _SERIALIZER.url("library_name", library_name, "str", max_length=100, min_length=0),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_create_request_initial(library_name: str, **kwargs: Any) -> HttpRequest:
    """Creates a library with the library name.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param library_name: file name to upload. Minimum length of the filename should be 1 excluding
     the extension length.
    :type library_name: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 202
            response.json() == {
                "artifactId": "str (optional)",
                "changed": "str (optional)",
                "created": "str (optional)",
                "id": "str (optional)",
                "name": "str (optional)",
                "operationId": "str (optional)",
                "recordId": "int (optional)",
                "state": "str (optional)",
                "type": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraries/{libraryName}")
    path_format_arguments = {
        "libraryName": _SERIALIZER.url("library_name", library_name, "str", max_length=100, min_length=0),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_append_request(
    library_name: str, *, content: Any, content: IO, blob_condition_append_position: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    """Append the content to the library resource created using the create operation. The maximum
    content size is 4MiB. Content larger than 4MiB must be appended in 4MiB chunks.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param library_name: file name to upload. Minimum length of the filename should be 1 excluding
     the extension length.
    :type library_name: str
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Library file chunk.
    :paramtype content: Any
    :keyword content: Library file chunk.
    :paramtype content: IO
    :keyword blob_condition_append_position: Set this header to a byte offset at which the block is
     expected to be appended. The request succeeds only if the current offset matches this value.
     Otherwise, the request fails with the AppendPositionConditionNotMet error (HTTP status code 412
     – Precondition Failed).
    :paramtype blob_condition_append_position: long
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest .HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest .HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    comp = "appendblock"
    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/libraries/{libraryName}")
    path_format_arguments = {
        "libraryName": _SERIALIZER.url("library_name", library_name, "str", max_length=100, min_length=0),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if blob_condition_append_position is not None:
        header_parameters["x-ms-blob-condition-appendpos"] = _SERIALIZER.header(
            "blob_condition_append_position", blob_condition_append_position, "long"
        )
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="PUT", url=url, params=query_parameters, headers=header_parameters, content=content, **kwargs
    )
