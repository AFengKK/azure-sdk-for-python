# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Dict, IO, Optional

from azure.core.pipeline.transport._base import _format_url_section
from azure.synapse.artifacts.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_get_pipelines_by_workspace_request(
    **kwargs: Any
) -> HttpRequest:
    """Lists pipelines.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :return: Returns an :class:`~azure.synapse.artifacts.core.rest.HttpRequest` that you will pass
     to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for
     how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "str (optional)",
                "value": [
                    {
                        "": {
                            "str": "object (optional)"
                        },
                        "activities": [
                            {
                                "": {
                                    "str": "object (optional)"
                                },
                                "dependsOn": [
                                    {
                                        "": {
                                            "str": "object (optional)"
                                        },
                                        "activity": "str",
                                        "dependencyConditions": [
                                            "str"
                                        ]
                                    }
                                ],
                                "description": "str (optional)",
                                "name": "str",
                                "type": "Activity",
                                "userProperties": [
                                    {
                                        "name": "str",
                                        "value": "object"
                                    }
                                ]
                            }
                        ],
                        "annotations": [
                            "object (optional)"
                        ],
                        "concurrency": "int (optional)",
                        "description": "str (optional)",
                        "folder": {
                            "name": "str (optional)"
                        },
                        "parameters": {
                            "str": {
                                "defaultValue": "object (optional)",
                                "type": "str"
                            }
                        },
                        "runDimensions": {
                            "str": "object (optional)"
                        },
                        "variables": {
                            "str": {
                                "defaultValue": "object (optional)",
                                "type": "str"
                            }
                        }
                    }
                ]
            }
    """


    api_version = "2019-06-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/pipelines')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_pipeline_request(
    pipeline_name: str,
    *,
    json: Any = None,
    content: Any = None,
    if_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Creates or updates a pipeline.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param pipeline_name: The pipeline name.
    :type pipeline_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Pipeline resource definition.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Pipeline resource definition.
    :paramtype content: Any
    :keyword if_match: ETag of the pipeline entity.  Should only be specified for update, for which
     it should match existing entity or can be * for unconditional update.
    :paramtype if_match: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest.HttpRequest` that you will pass
     to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for
     how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "": {
                    "str": "object (optional)"
                },
                "activities": [
                    {
                        "": {
                            "str": "object (optional)"
                        },
                        "dependsOn": [
                            {
                                "": {
                                    "str": "object (optional)"
                                },
                                "activity": "str",
                                "dependencyConditions": [
                                    "str"
                                ]
                            }
                        ],
                        "description": "str (optional)",
                        "name": "str",
                        "type": "Activity",
                        "userProperties": [
                            {
                                "name": "str",
                                "value": "object"
                            }
                        ]
                    }
                ],
                "annotations": [
                    "object (optional)"
                ],
                "concurrency": "int (optional)",
                "description": "str (optional)",
                "folder": {
                    "name": "str (optional)"
                },
                "parameters": {
                    "str": {
                        "defaultValue": "object (optional)",
                        "type": "str"
                    }
                },
                "runDimensions": {
                    "str": "object (optional)"
                },
                "variables": {
                    "str": {
                        "defaultValue": "object (optional)",
                        "type": "str"
                    }
                }
            }

            # response body for status code(s): 200
            response.json() == {
                "": {
                    "str": "object (optional)"
                },
                "activities": [
                    {
                        "": {
                            "str": "object (optional)"
                        },
                        "dependsOn": [
                            {
                                "": {
                                    "str": "object (optional)"
                                },
                                "activity": "str",
                                "dependencyConditions": [
                                    "str"
                                ]
                            }
                        ],
                        "description": "str (optional)",
                        "name": "str",
                        "type": "Activity",
                        "userProperties": [
                            {
                                "name": "str",
                                "value": "object"
                            }
                        ]
                    }
                ],
                "annotations": [
                    "object (optional)"
                ],
                "concurrency": "int (optional)",
                "description": "str (optional)",
                "folder": {
                    "name": "str (optional)"
                },
                "parameters": {
                    "str": {
                        "defaultValue": "object (optional)",
                        "type": "str"
                    }
                },
                "runDimensions": {
                    "str": "object (optional)"
                },
                "variables": {
                    "str": {
                        "defaultValue": "object (optional)",
                        "type": "str"
                    }
                }
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2019-06-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/pipelines/{pipelineName}')
    path_format_arguments = {
        'pipelineName': _SERIALIZER.url("pipeline_name", pipeline_name, 'str', max_length=260, min_length=1, pattern=r'^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_match is not None:
        header_parameters['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_get_pipeline_request(
    pipeline_name: str,
    *,
    if_none_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Gets a pipeline.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param pipeline_name: The pipeline name.
    :type pipeline_name: str
    :keyword if_none_match: ETag of the pipeline entity. Should only be specified for get. If the
     ETag matches the existing entity tag, or if * was provided, then no content will be returned.
    :paramtype if_none_match: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest.HttpRequest` that you will pass
     to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for
     how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "": {
                    "str": "object (optional)"
                },
                "activities": [
                    {
                        "": {
                            "str": "object (optional)"
                        },
                        "dependsOn": [
                            {
                                "": {
                                    "str": "object (optional)"
                                },
                                "activity": "str",
                                "dependencyConditions": [
                                    "str"
                                ]
                            }
                        ],
                        "description": "str (optional)",
                        "name": "str",
                        "type": "Activity",
                        "userProperties": [
                            {
                                "name": "str",
                                "value": "object"
                            }
                        ]
                    }
                ],
                "annotations": [
                    "object (optional)"
                ],
                "concurrency": "int (optional)",
                "description": "str (optional)",
                "folder": {
                    "name": "str (optional)"
                },
                "parameters": {
                    "str": {
                        "defaultValue": "object (optional)",
                        "type": "str"
                    }
                },
                "runDimensions": {
                    "str": "object (optional)"
                },
                "variables": {
                    "str": {
                        "defaultValue": "object (optional)",
                        "type": "str"
                    }
                }
            }
    """


    api_version = "2019-06-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/pipelines/{pipelineName}')
    path_format_arguments = {
        'pipelineName': _SERIALIZER.url("pipeline_name", pipeline_name, 'str', max_length=260, min_length=1, pattern=r'^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_pipeline_request(
    pipeline_name: str,
    **kwargs: Any
) -> HttpRequest:
    """Deletes a pipeline.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param pipeline_name: The pipeline name.
    :type pipeline_name: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest.HttpRequest` that you will pass
     to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for
     how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest.HttpRequest
    """


    api_version = "2019-06-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/pipelines/{pipelineName}')
    path_format_arguments = {
        'pipelineName': _SERIALIZER.url("pipeline_name", pipeline_name, 'str', max_length=260, min_length=1, pattern=r'^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_rename_pipeline_request(
    pipeline_name: str,
    *,
    json: Any = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Renames a pipeline.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param pipeline_name: The pipeline name.
    :type pipeline_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. proposed new name.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). proposed new name.
    :paramtype content: Any
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest.HttpRequest` that you will pass
     to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for
     how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "newName": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2019-06-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/pipelines/{pipelineName}/rename')
    path_format_arguments = {
        'pipelineName': _SERIALIZER.url("pipeline_name", pipeline_name, 'str', max_length=260, min_length=1, pattern=r'^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_create_pipeline_run_request(
    pipeline_name: str,
    *,
    json: Any = None,
    content: Any = None,
    reference_pipeline_run_id: Optional[str] = None,
    is_recovery: Optional[bool] = None,
    start_activity_name: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Creates a run of a pipeline.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param pipeline_name: The pipeline name.
    :type pipeline_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Parameters of the pipeline run. These parameters will be
     used only if the runId is not specified.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Parameters of the pipeline run. These parameters will be
     used only if the runId is not specified.
    :paramtype content: Any
    :keyword reference_pipeline_run_id: The pipeline run identifier. If run ID is specified the
     parameters of the specified run will be used to create a new run.
    :paramtype reference_pipeline_run_id: str
    :keyword is_recovery: Recovery mode flag. If recovery mode is set to true, the specified
     referenced pipeline run and the new run will be grouped under the same groupId.
    :paramtype is_recovery: bool
    :keyword start_activity_name: In recovery mode, the rerun will start from this activity. If not
     specified, all activities will run.
    :paramtype start_activity_name: str
    :return: Returns an :class:`~azure.synapse.artifacts.core.rest.HttpRequest` that you will pass
     to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for
     how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.artifacts.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "str": "object (optional)"
            }

            # response body for status code(s): 202
            response.json() == {
                "runId": "str"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2019-06-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/pipelines/{pipelineName}/createRun')
    path_format_arguments = {
        'pipelineName': _SERIALIZER.url("pipeline_name", pipeline_name, 'str', max_length=260, min_length=1, pattern=r'^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if reference_pipeline_run_id is not None:
        query_parameters['referencePipelineRunId'] = _SERIALIZER.query("reference_pipeline_run_id", reference_pipeline_run_id, 'str')
    if is_recovery is not None:
        query_parameters['isRecovery'] = _SERIALIZER.query("is_recovery", is_recovery, 'bool')
    if start_activity_name is not None:
        query_parameters['startActivityName'] = _SERIALIZER.query("start_activity_name", start_activity_name, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )

