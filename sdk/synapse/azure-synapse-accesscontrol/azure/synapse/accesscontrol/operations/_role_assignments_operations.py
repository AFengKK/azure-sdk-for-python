# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.synapse.accesscontrol.core.rest import HttpRequest

from .. import models as _models
from ..rest import role_assignments as rest_role_assignments

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]


class RoleAssignmentsOperations(object):
    """RoleAssignmentsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.synapse.accesscontrol.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def check_principal_access(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.CheckPrincipalAccessResponse"
        """Check if the given principalId has access to perform list of actions at a given scope.

        :keyword subject: Subject details.
        :paramtype subject: ~azure.synapse.accesscontrol.models.SubjectInfo
        :keyword actions: List of actions.
        :paramtype actions: list[~azure.synapse.accesscontrol.models.RequiredAction]
        :keyword scope: Scope at which the check access is done.
        :paramtype scope: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CheckPrincipalAccessResponse, or the result of cls(response)
        :rtype: ~azure.synapse.accesscontrol.models.CheckPrincipalAccessResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.CheckPrincipalAccessResponse"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]
        subject = kwargs.pop("subject")  # type: "_models.SubjectInfo"
        actions = kwargs.pop("actions")  # type: List["_models.RequiredAction"]
        scope = kwargs.pop("scope")  # type: str

        _request = _models.CheckPrincipalAccessRequest(subject=subject, actions=actions, scope=scope)
        json = self._serialize.body(_request, "object")

        request = rest_role_assignments.build_check_principal_access_request(
            json=json, content_type=content_type, template_url=self.check_principal_access.metadata["url"], **kwargs
        )._internal_request
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorContract, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("CheckPrincipalAccessResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    check_principal_access.metadata = {"url": "/checkAccessSynapseRbac"}  # type: ignore

    def list_role_assignments(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RoleAssignmentDetailsList"
        """List role assignments.

        :keyword role_id: Synapse Built-In Role Id.
        :paramtype role_id: str
        :keyword principal_id: Object ID of the AAD principal or security-group.
        :paramtype principal_id: str
        :keyword scope: Scope of the Synapse Built-in Role.
        :paramtype scope: str
        :keyword continuation_token_parameter: Continuation token.
        :paramtype continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RoleAssignmentDetailsList, or the result of cls(response)
        :rtype: ~azure.synapse.accesscontrol.models.RoleAssignmentDetailsList
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RoleAssignmentDetailsList"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        role_id = kwargs.pop("role_id", None)  # type: Optional[str]
        principal_id = kwargs.pop("principal_id", None)  # type: Optional[str]
        scope = kwargs.pop("scope", None)  # type: Optional[str]
        continuation_token_parameter = kwargs.pop("continuation_token_parameter", None)  # type: Optional[str]

        request = rest_role_assignments.build_list_role_assignments_request(
            role_id=role_id,
            principal_id=principal_id,
            scope=scope,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_role_assignments.metadata["url"],
            **kwargs
        )._internal_request
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorContract, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-continuation"] = self._deserialize("str", response.headers.get("x-ms-continuation"))

        deserialized = self._deserialize("RoleAssignmentDetailsList", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    list_role_assignments.metadata = {"url": "/roleAssignments"}  # type: ignore

    def create_role_assignment(
        self,
        role_assignment_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RoleAssignmentDetails"
        """Create role assignment.

        :param role_assignment_id: The ID of the role assignment.
        :type role_assignment_id: str
        :keyword role_id: Role ID of the Synapse Built-In Role.
        :paramtype role_id: str
        :keyword principal_id: Object ID of the AAD principal or security-group.
        :paramtype principal_id: str
        :keyword scope: Scope at which the role assignment is created.
        :paramtype scope: str
        :keyword principal_type: Type of the principal Id: User, Group or ServicePrincipal.
        :paramtype principal_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RoleAssignmentDetails, or the result of cls(response)
        :rtype: ~azure.synapse.accesscontrol.models.RoleAssignmentDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RoleAssignmentDetails"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]
        role_id = kwargs.pop("role_id")  # type: str
        principal_id = kwargs.pop("principal_id")  # type: str
        scope = kwargs.pop("scope")  # type: str
        principal_type = kwargs.pop("principal_type", None)  # type: Optional[str]

        _request = _models.RoleAssignmentRequest(
            role_id=role_id, principal_id=principal_id, scope=scope, principal_type=principal_type
        )
        json = self._serialize.body(_request, "object")

        request = rest_role_assignments.build_create_role_assignment_request(
            role_assignment_id=role_assignment_id,
            json=json,
            content_type=content_type,
            template_url=self.create_role_assignment.metadata["url"],
            **kwargs
        )._internal_request
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorContract, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("RoleAssignmentDetails", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_role_assignment.metadata = {"url": "/roleAssignments/{roleAssignmentId}"}  # type: ignore

    def get_role_assignment_by_id(
        self,
        role_assignment_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RoleAssignmentDetails"
        """Get role assignment by role assignment Id.

        :param role_assignment_id: The ID of the role assignment.
        :type role_assignment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RoleAssignmentDetails, or the result of cls(response)
        :rtype: ~azure.synapse.accesscontrol.models.RoleAssignmentDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RoleAssignmentDetails"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = rest_role_assignments.build_get_role_assignment_by_id_request(
            role_assignment_id=role_assignment_id, template_url=self.get_role_assignment_by_id.metadata["url"], **kwargs
        )._internal_request
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorContract, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("RoleAssignmentDetails", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_role_assignment_by_id.metadata = {"url": "/roleAssignments/{roleAssignmentId}"}  # type: ignore

    def delete_role_assignment_by_id(
        self,
        role_assignment_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete role assignment by role assignment Id.

        :param role_assignment_id: The ID of the role assignment.
        :type role_assignment_id: str
        :keyword scope: Scope of the Synapse Built-in Role.
        :paramtype scope: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        scope = kwargs.pop("scope", None)  # type: Optional[str]

        request = rest_role_assignments.build_delete_role_assignment_by_id_request(
            role_assignment_id=role_assignment_id,
            scope=scope,
            template_url=self.delete_role_assignment_by_id.metadata["url"],
            **kwargs
        )._internal_request
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorContract, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_role_assignment_by_id.metadata = {"url": "/roleAssignments/{roleAssignmentId}"}  # type: ignore
