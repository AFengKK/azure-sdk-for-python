# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.synapse.accesscontrol.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, List, Optional

_SERIALIZER = Serializer()


def build_check_principal_access_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Check if the given principalId has access to perform list of actions at a given scope.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Details of scope, list of actions and principal.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Details of scope, list of actions and principal.
    :paramtype content: Any
    :return: Returns an :class:`~azure.synapse.accesscontrol.core.rest.HttpRequest` that you will
     pass to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart
     for how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.accesscontrol.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "actions": [
                    {
                        "id": "str",
                        "isDataAction": "bool"
                    }
                ],
                "scope": "str",
                "subject": {
                    "groupIds": [
                        "str (optional)"
                    ],
                    "principalId": "str"
                }
            }

            # response body for status code(s): 200
            response.json() == {
                "accessDecisions": [
                    {
                        "accessDecision": "str (optional)",
                        "actionId": "str (optional)",
                        "roleAssignment": {
                            "id": "str (optional)",
                            "principalId": "str (optional)",
                            "principalType": "str (optional)",
                            "roleDefinitionId": "str (optional)",
                            "scope": "str (optional)"
                        }
                    }
                ]
            }
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]
    json = kwargs.pop("json", None)  # type: Any

    api_version = "2020-12-01"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/checkAccessSynapseRbac")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_list_role_assignments_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """List role assignments.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :keyword role_id: Synapse Built-In Role Id.
    :paramtype role_id: str
    :keyword principal_id: Object ID of the AAD principal or security-group.
    :paramtype principal_id: str
    :keyword scope: Scope of the Synapse Built-in Role.
    :paramtype scope: str
    :keyword continuation_token_parameter: Continuation token.
    :paramtype continuation_token_parameter: str
    :return: Returns an :class:`~azure.synapse.accesscontrol.core.rest.HttpRequest` that you will
     pass to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart
     for how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.accesscontrol.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "count": "int (optional)",
                "value": [
                    {
                        "id": "str (optional)",
                        "principalId": "str (optional)",
                        "principalType": "str (optional)",
                        "roleDefinitionId": "str (optional)",
                        "scope": "str (optional)"
                    }
                ]
            }
    """

    role_id = kwargs.pop("role_id", None)  # type: Optional[str]
    principal_id = kwargs.pop("principal_id", None)  # type: Optional[str]
    scope = kwargs.pop("scope", None)  # type: Optional[str]
    continuation_token_parameter = kwargs.pop("continuation_token_parameter", None)  # type: Optional[str]
    role_id = kwargs.pop("role_id", None)  # type: Optional[str]
    principal_id = kwargs.pop("principal_id", None)  # type: Optional[str]
    scope = kwargs.pop("scope", None)  # type: Optional[str]
    continuation_token_parameter = kwargs.pop("continuation_token_parameter", None)  # type: Optional[str]

    api_version = "2020-12-01"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/roleAssignments")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if role_id is not None:
        query_parameters["roleId"] = _SERIALIZER.query("role_id", role_id, "str")
    if principal_id is not None:
        query_parameters["principalId"] = _SERIALIZER.query("principal_id", principal_id, "str")
    if scope is not None:
        query_parameters["scope"] = _SERIALIZER.query("scope", scope, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if continuation_token_parameter is not None:
        header_parameters["x-ms-continuation"] = _SERIALIZER.header(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_create_role_assignment_request(
    role_assignment_id,  # type: str
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Create role assignment.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param role_assignment_id: The ID of the role assignment.
    :type role_assignment_id: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Details of role id, scope and object id.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Details of role id, scope and object id.
    :paramtype content: Any
    :return: Returns an :class:`~azure.synapse.accesscontrol.core.rest.HttpRequest` that you will
     pass to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart
     for how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.accesscontrol.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "principalId": "str",
                "principalType": "str (optional)",
                "roleId": "str",
                "scope": "str"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "principalId": "str (optional)",
                "principalType": "str (optional)",
                "roleDefinitionId": "str (optional)",
                "scope": "str (optional)"
            }
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]
    json = kwargs.pop("json", None)  # type: Any

    api_version = "2020-12-01"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/roleAssignments/{roleAssignmentId}")
    path_format_arguments = {
        "roleAssignmentId": _SERIALIZER.url("role_assignment_id", role_assignment_id, "str", min_length=1),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_get_role_assignment_by_id_request(
    role_assignment_id,  # type: str
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get role assignment by role assignment Id.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param role_assignment_id: The ID of the role assignment.
    :type role_assignment_id: str
    :return: Returns an :class:`~azure.synapse.accesscontrol.core.rest.HttpRequest` that you will
     pass to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart
     for how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.accesscontrol.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "principalId": "str (optional)",
                "principalType": "str (optional)",
                "roleDefinitionId": "str (optional)",
                "scope": "str (optional)"
            }
    """

    api_version = "2020-12-01"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/roleAssignments/{roleAssignmentId}")
    path_format_arguments = {
        "roleAssignmentId": _SERIALIZER.url("role_assignment_id", role_assignment_id, "str", min_length=1),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_delete_role_assignment_by_id_request(
    role_assignment_id,  # type: str
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete role assignment by role assignment Id.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param role_assignment_id: The ID of the role assignment.
    :type role_assignment_id: str
    :keyword scope: Scope of the Synapse Built-in Role.
    :paramtype scope: str
    :return: Returns an :class:`~azure.synapse.accesscontrol.core.rest.HttpRequest` that you will
     pass to the client's `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart
     for how to incorporate this response into your code flow.
    :rtype: ~azure.synapse.accesscontrol.core.rest.HttpRequest
    """

    scope = kwargs.pop("scope", None)  # type: Optional[str]
    scope = kwargs.pop("scope", None)  # type: Optional[str]

    api_version = "2020-12-01"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/roleAssignments/{roleAssignmentId}")
    path_format_arguments = {
        "roleAssignmentId": _SERIALIZER.url("role_assignment_id", role_assignment_id, "str", min_length=1),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if scope is not None:
        query_parameters["scope"] = _SERIALIZER.query("scope", scope, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=url, params=query_parameters, headers=header_parameters, **kwargs)
