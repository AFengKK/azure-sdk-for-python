# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.synapse.monitoring.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()


def build_get_spark_job_list_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get list of spark applications for the workspace.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :keyword x_ms_client_request_id: Can provide a guid, which is helpful for debugging and to
     provide better customer support.
    :paramtype x_ms_client_request_id: str
    :return: Returns an :class:`~azure.synapse.monitoring.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.monitoring.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nJobs": "int (optional)",
                "sparkJobs": [
                    {
                        "compute": "str (optional)",
                        "endTime": "datetime (optional)",
                        "jobType": "str (optional)",
                        "livyId": "str (optional)",
                        "name": "str (optional)",
                        "pipeline": [
                            "..."
                        ],
                        "queuedDuration": "str (optional)",
                        "runningDuration": "str (optional)",
                        "sparkApplicationId": "str (optional)",
                        "sparkJobDefinition": "str (optional)",
                        "state": "str (optional)",
                        "submitTime": "datetime (optional)",
                        "submitter": "str (optional)",
                        "timing": [
                            "str (optional)"
                        ],
                        "totalDuration": "str (optional)"
                    }
                ]
            }
    """

    x_ms_client_request_id = kwargs.pop("x_ms_client_request_id", None)  # type: Optional[str]
    x_ms_client_request_id = kwargs.pop("x_ms_client_request_id", None)  # type: Optional[str]

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/monitoring/workloadTypes/spark/Applications")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if x_ms_client_request_id is not None:
        header_parameters["x-ms-client-request-id"] = _SERIALIZER.header(
            "x_ms_client_request_id", x_ms_client_request_id, "str"
        )
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_get_sql_job_query_string_request(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    """Get SQL OD/DW Query for the workspace.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :keyword x_ms_client_request_id: Can provide a guid, which is helpful for debugging and to
     provide better customer support.
    :paramtype x_ms_client_request_id: str
    :keyword filter:
    :paramtype filter: str
    :keyword orderby:
    :paramtype orderby: str
    :keyword skip:
    :paramtype skip: str
    :return: Returns an :class:`~azure.synapse.monitoring.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.synapse.monitoring.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "query": "str (optional)"
            }
    """

    x_ms_client_request_id = kwargs.pop("x_ms_client_request_id", None)  # type: Optional[str]
    filter = kwargs.pop("filter", None)  # type: Optional[str]
    orderby = kwargs.pop("orderby", None)  # type: Optional[str]
    skip = kwargs.pop("skip", None)  # type: Optional[str]
    x_ms_client_request_id = kwargs.pop("x_ms_client_request_id", None)  # type: Optional[str]
    filter = kwargs.pop("filter", None)  # type: Optional[str]
    orderby = kwargs.pop("orderby", None)  # type: Optional[str]
    skip = kwargs.pop("skip", None)  # type: Optional[str]

    api_version = "2020-12-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/monitoring/workloadTypes/sql/querystring")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        query_parameters["filter"] = _SERIALIZER.query("filter", filter, "str")
    if orderby is not None:
        query_parameters["$orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if skip is not None:
        query_parameters["skip"] = _SERIALIZER.query("skip", skip, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if x_ms_client_request_id is not None:
        header_parameters["x-ms-client-request-id"] = _SERIALIZER.header(
            "x_ms_client_request_id", x_ms_client_request_id, "str"
        )
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)
